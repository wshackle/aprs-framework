package crcl.utils;

import org.checkerframework.checker.nullness.qual.Nullable;

class CRCLPosemath {
    static PoseType pose(PointType arg0);
    static PoseType pose(PointType arg0, VectorType arg1, VectorType arg2);
    static PointType point(BigDecimal arg0, BigDecimal arg1, BigDecimal arg2);
    static PointType point(double arg0, double arg1, double arg2);
    static VectorType vector(BigDecimal arg0, BigDecimal arg1, BigDecimal arg2);
    static VectorType vector(double arg0, double arg1, double arg2);
    static long getMaxId(CRCLProgramType arg0);
    @Nullable static PoseType getPose(CRCLStatusType arg0);
    static PointType copy(PointType arg0);
    static Double xyPoint2D(PointType arg0);
    static Double xyPoint2D(PoseType arg0);
    static Double rzPoint2D(PointType arg0);
    static Double rzPoint2D(PoseType arg0);
    @Nullable static VectorType copy(VectorType arg0);
    static PoseType copy(PoseType arg0);
    @Nullable static CRCLStatusType copy(CRCLStatusType arg0);
    @Nullable static SettingsStatusType copy(SettingsStatusType arg0);
    @Nullable static GripperStatusType copy(GripperStatusType arg0);
    @Nullable static PoseStatusType copy(PoseStatusType arg0);
    @Nullable static TwistType copy(TwistType arg0);
    @Nullable static WrenchType copy(WrenchType arg0);
    @Nullable static JointStatusesType copy(JointStatusesType arg0);
    @Nullable static JointStatusType copy(JointStatusType arg0);
    @Nullable static CommandStatusType copy(CommandStatusType arg0);
    static PoseType flipXAxis(PoseType arg0);
    static PointType newZeroedPoint();
    static CRCLProgramType transformProgram(PoseType arg0, CRCLProgramType arg1);
    static CRCLProgramType transformProgramWithFilter(PoseType arg0, CRCLProgramType arg1, PoseFilter arg2);
    static CRCLProgramType flipXAxis(CRCLProgramType arg0);
    static CRCLProgramType copy(CRCLProgramType arg0);
    static PoseType compute2DTransform(PointType arg0, PointType arg1, PointType arg2, PointType arg3) throws CRCLException;
    static PmPose compute2DPmTransform(PmCartesian arg0, PmCartesian arg1, PmCartesian arg2, PmCartesian arg3) throws CRCLException;
    @Nullable static PointType getPoint(CRCLStatusType arg0);
    @Nullable static VectorType getXAxis(CRCLStatusType arg0);
    @Nullable static VectorType getZAxis(CRCLStatusType arg0);
    static void setPose(CRCLStatusType arg0, PoseType arg1);
    static void setPoint(CRCLStatusType arg0, PointType arg1);
    static void setXAxis(CRCLStatusType arg0, VectorType arg1);
    static void setZAxis(CRCLStatusType arg0, VectorType arg1);
    static void initPose(CRCLStatusType arg0);
    static String toString(PointType arg0);
    static String toString(VectorType arg0);
    static String toString(PoseType arg0);
    static String toString(PoseToleranceType arg0);
    static PmCartesian toPmCartesian(PointType arg0);
    static PoseType identityPose();
    static String pointToString(PointType arg0);
    static String poseToString(PoseType arg0);
    static String poseToXyzRpyString(PoseType arg0);
    static PointType add(PointType arg0, PointType arg1);
    static PointType subtract(PointType arg0, PointType arg1);
    static PmPose toPmPose(CRCLStatusType arg0) throws CRCLException;
    static PmPose toPmPose(PoseType arg0) throws CRCLException;
    static PointType multiply(PoseType arg0, PointType arg1) throws CRCLException;
    static PointType multiply(BigDecimal arg0, VectorType arg1);
    static PointType multiply(double arg0, VectorType arg1);
    static PointType multiply(BigDecimal arg0, PointType arg1);
    static PointType multiply(double arg0, PointType arg1);
    static double dot(VectorType arg0, VectorType arg1);
    static double dot(VectorType arg0, PointType arg1);
    static double norm(VectorType arg0);
    static VectorType normalize(VectorType arg0) throws CRCLException;
    static VectorType cross(VectorType arg0, VectorType arg1);
     static PoseType toPose(PmPose arg0) throws PmException;
    static PoseType toPose(double[][] arg0);
    static double[][] toHomMat(PoseType arg0);
    static PoseType invert(PoseType arg0);
    static PoseType multiply(PoseType arg0, PoseType arg1);
    static PoseType shift(PoseType arg0, PointType arg1);
    static PoseType pointXAxisZAxisToPose(PointType arg0, VectorType arg1, VectorType arg2);
    static double diffPoints(PointType arg0, PointType arg1);
    static double diffPosesTran(PoseType arg0, PoseType arg1);
    static PmCartesian vectorToPmCartesian(VectorType arg0);
    static PoseType toPoseType(PmCartesian arg0, PmRotationMatrix arg1) throws PmException;
    static PoseType toPoseType(PmCartesian arg0, PmRotationMatrix arg1, PoseType arg2) throws PmException;
    static PoseType toPoseType(PmCartesian arg0, PmRotationVector arg1, PoseType arg2) throws PmException;
    static PoseType toPoseType(PmCartesian arg0, PmRpy arg1, PoseType arg2) throws PmException;
    static PoseType toPoseType(PmCartesian arg0, PmRotationVector arg1) throws PmException;
    static PoseType toPoseType(PmCartesian arg0, PmRpy arg1) throws PmException;
    static PmRotationMatrix toPmRotationMatrix(PoseType arg0) throws PmException;
    static PmRotationVector toPmRotationVector(PoseType arg0) throws PmException;
    static PmRpy toPmRpy(PoseType arg0) throws PmException;
    static double maxDiffDoubleArray(double[] arg0, double[] arg1, double arg2);
    static double diffPosesRot(PoseType arg0, PoseType arg1) throws PmException;
    static PointType toPointType(PmCartesian arg0);
}
interface CRCLPosemath$PoseFilter {
    boolean test(PoseType arg0);
}
