
package javax.swing;


import org.checkerframework.checker.nullness.qual.Nullable;

class JTable extends JComponent implements TableModelListener, Scrollable, TableColumnModelListener, ListSelectionListener, CellEditorListener, Accessible, RowSorterListener {
    static final int AUTO_RESIZE_OFF;
    static final int AUTO_RESIZE_NEXT_COLUMN;
    static final int AUTO_RESIZE_SUBSEQUENT_COLUMNS;
    static final int AUTO_RESIZE_LAST_COLUMN;
    static final int AUTO_RESIZE_ALL_COLUMNS;
    protected TableModel dataModel;
    protected TableColumnModel columnModel;
    protected ListSelectionModel selectionModel;
    protected JTableHeader tableHeader;
    protected int rowHeight;
    protected int rowMargin;
    protected Color gridColor;
    protected boolean showHorizontalLines;
    protected boolean showVerticalLines;
    protected int autoResizeMode;
    protected boolean autoCreateColumnsFromModel;
    protected Dimension preferredViewportSize;
    protected boolean rowSelectionAllowed;
    protected boolean cellSelectionEnabled;
    protected Component editorComp;
    protected TableCellEditor cellEditor;
    protected int editingColumn;
    protected int editingRow;
    protected Hashtable defaultRenderersByColumnClass;
    protected Hashtable defaultEditorsByColumnClass;
    protected Color selectionForeground;
    protected Color selectionBackground;
    JTable();
    JTable(TableModel arg0);
    JTable(TableModel arg0, TableColumnModel arg1);
    JTable(TableModel arg0, TableColumnModel arg1, ListSelectionModel arg2);
    JTable(int arg0, int arg1);
    JTable(Vector arg0, Vector arg1);
    JTable(Object[][] arg0, Object[] arg1);
    void addNotify();
    protected void configureEnclosingScrollPane();
    void removeNotify();
    protected void unconfigureEnclosingScrollPane();
    static JScrollPane createScrollPaneForTable(JTable arg0);
    void setTableHeader(JTableHeader arg0);
    JTableHeader getTableHeader();
    void setRowHeight(int arg0);
    int getRowHeight();
    void setRowHeight(int arg0, int arg1);
    int getRowHeight(int arg0);
    void setRowMargin(int arg0);
    int getRowMargin();
    void setIntercellSpacing(Dimension arg0);
    Dimension getIntercellSpacing();
    void setGridColor(Color arg0);
    Color getGridColor();
    void setShowGrid(boolean arg0);
    void setShowHorizontalLines(boolean arg0);
    void setShowVerticalLines(boolean arg0);
    boolean getShowHorizontalLines();
    boolean getShowVerticalLines();
    void setAutoResizeMode(int arg0);
    int getAutoResizeMode();
    void setAutoCreateColumnsFromModel(boolean arg0);
    boolean getAutoCreateColumnsFromModel();
    void createDefaultColumnsFromModel();
    void setDefaultRenderer(Class<?> arg0, TableCellRenderer arg1);
    TableCellRenderer getDefaultRenderer(Class<?> arg0);
    void setDefaultEditor(Class<?> arg0, TableCellEditor arg1);
    TableCellEditor getDefaultEditor(Class<?> arg0);
    void setDragEnabled(boolean arg0);
    boolean getDragEnabled();
    void setDropMode(DropMode arg0);
    DropMode getDropMode();
    DropLocation getDropLocation();
    void setAutoCreateRowSorter(boolean arg0);
    boolean getAutoCreateRowSorter();
    void setUpdateSelectionOnSort(boolean arg0);
    boolean getUpdateSelectionOnSort();
    void setRowSorter(@Nullable RowSorter<? extends TableModel> arg0);
    @Nullable RowSorter<? extends TableModel> getRowSorter();
    void setSelectionMode(int arg0);
    void setRowSelectionAllowed(boolean arg0);
    boolean getRowSelectionAllowed();
    void setColumnSelectionAllowed(boolean arg0);
    boolean getColumnSelectionAllowed();
    void setCellSelectionEnabled(boolean arg0);
    boolean getCellSelectionEnabled();
    void selectAll();
    void clearSelection();
    void setRowSelectionInterval(int arg0, int arg1);
    void setColumnSelectionInterval(int arg0, int arg1);
    void addRowSelectionInterval(int arg0, int arg1);
    void addColumnSelectionInterval(int arg0, int arg1);
    void removeRowSelectionInterval(int arg0, int arg1);
    void removeColumnSelectionInterval(int arg0, int arg1);
    int getSelectedRow();
    int getSelectedColumn();
    int[] getSelectedRows();
    int[] getSelectedColumns();
    int getSelectedRowCount();
    int getSelectedColumnCount();
    boolean isRowSelected(int arg0);
    boolean isColumnSelected(int arg0);
    boolean isCellSelected(int arg0, int arg1);
    void changeSelection(int arg0, int arg1, boolean arg2, boolean arg3);
    Color getSelectionForeground();
    void setSelectionForeground(Color arg0);
    Color getSelectionBackground();
    void setSelectionBackground(Color arg0);
    TableColumn getColumn(Object arg0);
    int convertColumnIndexToModel(int arg0);
    int convertColumnIndexToView(int arg0);
    int convertRowIndexToView(int arg0);
    int convertRowIndexToModel(int arg0);
    int getRowCount();
    int getColumnCount();
    String getColumnName(int arg0);
    Class<?> getColumnClass(int arg0);
    @Nullable Object getValueAt(int arg0, int arg1);
    void setValueAt(@Nullable Object arg0, int arg1, int arg2);
    boolean isCellEditable(int arg0, int arg1);
    void addColumn(TableColumn arg0);
    void removeColumn(TableColumn arg0);
    void moveColumn(int arg0, int arg1);
    int columnAtPoint(Point arg0);
    int rowAtPoint(Point arg0);
    Rectangle getCellRect(int arg0, int arg1, boolean arg2);
    void doLayout();
    void sizeColumnsToFit(boolean arg0);
    void sizeColumnsToFit(int arg0);
    String getToolTipText(MouseEvent arg0);
    void setSurrendersFocusOnKeystroke(boolean arg0);
    boolean getSurrendersFocusOnKeystroke();
    boolean editCellAt(int arg0, int arg1);
    boolean editCellAt(int arg0, int arg1, EventObject arg2);
    boolean isEditing();
    Component getEditorComponent();
    int getEditingColumn();
    int getEditingRow();
    TableUI getUI();
    void setUI(TableUI arg0);
    void updateUI();
    String getUIClassID();
    void setModel(TableModel arg0);
    TableModel getModel();
    void setColumnModel(TableColumnModel arg0);
    TableColumnModel getColumnModel();
    void setSelectionModel(ListSelectionModel arg0);
    ListSelectionModel getSelectionModel();
    void sorterChanged(RowSorterEvent arg0);
    void tableChanged(TableModelEvent arg0);
    void columnAdded(TableColumnModelEvent arg0);
    void columnRemoved(TableColumnModelEvent arg0);
    void columnMoved(TableColumnModelEvent arg0);
    void columnMarginChanged(ChangeEvent arg0);
    void columnSelectionChanged(ListSelectionEvent arg0);
    void valueChanged(ListSelectionEvent arg0);
    void editingStopped(ChangeEvent arg0);
    void editingCanceled(ChangeEvent arg0);
    void setPreferredScrollableViewportSize(Dimension arg0);
    Dimension getPreferredScrollableViewportSize();
    int getScrollableUnitIncrement(Rectangle arg0, int arg1, int arg2);
    int getScrollableBlockIncrement(Rectangle arg0, int arg1, int arg2);
    boolean getScrollableTracksViewportWidth();
    boolean getScrollableTracksViewportHeight();
    void setFillsViewportHeight(boolean arg0);
    boolean getFillsViewportHeight();
    protected boolean processKeyBinding(KeyStroke arg0, KeyEvent arg1, int arg2, boolean arg3);
    protected void createDefaultRenderers();
    protected void createDefaultEditors();
    protected void initializeLocalVars();
    protected TableModel createDefaultDataModel();
    protected TableColumnModel createDefaultColumnModel();
    protected ListSelectionModel createDefaultSelectionModel();
    protected JTableHeader createDefaultTableHeader();
    protected void resizeAndRepaint();
    TableCellEditor getCellEditor();
    void setCellEditor(TableCellEditor arg0);
    void setEditingColumn(int arg0);
    void setEditingRow(int arg0);
    TableCellRenderer getCellRenderer(int arg0, int arg1);
    Component prepareRenderer(TableCellRenderer arg0, int arg1, int arg2);
    TableCellEditor getCellEditor(int arg0, int arg1);
    Component prepareEditor(TableCellEditor arg0, int arg1, int arg2);
    void removeEditor();
    protected String paramString();
    boolean print() throws PrinterException;
    boolean print(PrintMode arg0) throws PrinterException;
    boolean print(PrintMode arg0, MessageFormat arg1, MessageFormat arg2) throws PrinterException;
    boolean print(PrintMode arg0, MessageFormat arg1, MessageFormat arg2, boolean arg3, PrintRequestAttributeSet arg4, boolean arg5) throws PrinterException,HeadlessException;
    boolean print(PrintMode arg0, MessageFormat arg1, MessageFormat arg2, boolean arg3, PrintRequestAttributeSet arg4, boolean arg5, PrintService arg6) throws PrinterException,HeadlessException;
    Printable getPrintable(PrintMode arg0, MessageFormat arg1, MessageFormat arg2);
    AccessibleContext getAccessibleContext();
}
class JTable$DropLocation extends DropLocation {
    int getRow();
    int getColumn();
    boolean isInsertRow();
    boolean isInsertColumn();
    String toString();
}
class JTable$AccessibleJTable extends AccessibleJComponent implements AccessibleSelection, ListSelectionListener, TableModelListener, TableColumnModelListener, CellEditorListener, PropertyChangeListener, AccessibleExtendedTable {
    protected AccessibleJTable();
    void propertyChange(PropertyChangeEvent arg0);
    void tableChanged(TableModelEvent arg0);
    void tableRowsInserted(TableModelEvent arg0);
    void tableRowsDeleted(TableModelEvent arg0);
    void columnAdded(TableColumnModelEvent arg0);
    void columnRemoved(TableColumnModelEvent arg0);
    void columnMoved(TableColumnModelEvent arg0);
    void columnMarginChanged(ChangeEvent arg0);
    void columnSelectionChanged(ListSelectionEvent arg0);
    void editingStopped(ChangeEvent arg0);
    void editingCanceled(ChangeEvent arg0);
    void valueChanged(ListSelectionEvent arg0);
    AccessibleSelection getAccessibleSelection();
    AccessibleRole getAccessibleRole();
    Accessible getAccessibleAt(Point arg0);
    int getAccessibleChildrenCount();
    Accessible getAccessibleChild(int arg0);
    int getAccessibleSelectionCount();
    Accessible getAccessibleSelection(int arg0);
    boolean isAccessibleChildSelected(int arg0);
    void addAccessibleSelection(int arg0);
    void removeAccessibleSelection(int arg0);
    void clearAccessibleSelection();
    void selectAllAccessibleSelection();
    int getAccessibleRow(int arg0);
    int getAccessibleColumn(int arg0);
    int getAccessibleIndex(int arg0, int arg1);
    AccessibleTable getAccessibleTable();
    Accessible getAccessibleCaption();
    void setAccessibleCaption(Accessible arg0);
    Accessible getAccessibleSummary();
    void setAccessibleSummary(Accessible arg0);
    int getAccessibleRowCount();
    int getAccessibleColumnCount();
    Accessible getAccessibleAt(int arg0, int arg1);
    int getAccessibleRowExtentAt(int arg0, int arg1);
    int getAccessibleColumnExtentAt(int arg0, int arg1);
    AccessibleTable getAccessibleRowHeader();
    void setAccessibleRowHeader(AccessibleTable arg0);
    AccessibleTable getAccessibleColumnHeader();
    void setAccessibleColumnHeader(AccessibleTable arg0);
    Accessible getAccessibleRowDescription(int arg0);
    void setAccessibleRowDescription(int arg0, Accessible arg1);
    Accessible getAccessibleColumnDescription(int arg0);
    void setAccessibleColumnDescription(int arg0, Accessible arg1);
    boolean isAccessibleSelected(int arg0, int arg1);
    boolean isAccessibleRowSelected(int arg0);
    boolean isAccessibleColumnSelected(int arg0);
    int[] getSelectedAccessibleRows();
    int[] getSelectedAccessibleColumns();
    int getAccessibleRowAtIndex(int arg0);
    int getAccessibleColumnAtIndex(int arg0);
    int getAccessibleIndexAt(int arg0, int arg1);
}
class AccessibleJTable$AccessibleJTableModelChange implements AccessibleTableModelChange {
    protected int type;
    protected int firstRow;
    protected int lastRow;
    protected int firstColumn;
    protected int lastColumn;
    protected AccessibleJTableModelChange(int arg0, int arg1, int arg2, int arg3, int arg4);
    int getType();
    int getFirstRow();
    int getLastRow();
    int getFirstColumn();
    int getLastColumn();
}
class AccessibleJTable$AccessibleJTableCell extends AccessibleContext implements Accessible, AccessibleComponent {
    AccessibleJTableCell(JTable arg0, int arg1, int arg2, int arg3);
    AccessibleContext getAccessibleContext();
    protected AccessibleContext getCurrentAccessibleContext();
    protected Component getCurrentComponent();
    String getAccessibleName();
    void setAccessibleName(String arg0);
    String getAccessibleDescription();
    void setAccessibleDescription(String arg0);
    AccessibleRole getAccessibleRole();
    AccessibleStateSet getAccessibleStateSet();
    Accessible getAccessibleParent();
    int getAccessibleIndexInParent();
    int getAccessibleChildrenCount();
    Accessible getAccessibleChild(int arg0);
    Locale getLocale();
    void addPropertyChangeListener(PropertyChangeListener arg0);
    void removePropertyChangeListener(PropertyChangeListener arg0);
    AccessibleAction getAccessibleAction();
    AccessibleComponent getAccessibleComponent();
    AccessibleSelection getAccessibleSelection();
    AccessibleText getAccessibleText();
    AccessibleValue getAccessibleValue();
    Color getBackground();
    void setBackground(Color arg0);
    Color getForeground();
    void setForeground(Color arg0);
    Cursor getCursor();
    void setCursor(Cursor arg0);
    Font getFont();
    void setFont(Font arg0);
    FontMetrics getFontMetrics(Font arg0);
    boolean isEnabled();
    void setEnabled(boolean arg0);
    boolean isVisible();
    void setVisible(boolean arg0);
    boolean isShowing();
    boolean contains(Point arg0);
    Point getLocationOnScreen();
    Point getLocation();
    void setLocation(Point arg0);
    Rectangle getBounds();
    void setBounds(Rectangle arg0);
    Dimension getSize();
    void setSize(Dimension arg0);
    Accessible getAccessibleAt(Point arg0);
    boolean isFocusTraversable();
    void requestFocus();
    void addFocusListener(FocusListener arg0);
    void removeFocusListener(FocusListener arg0);
}
