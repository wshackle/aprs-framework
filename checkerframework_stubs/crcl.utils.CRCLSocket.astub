package crcl.utils;

import org.checkerframework.checker.nullness.qual.Nullable;

class CRCLSocket implements AutoCloseable {
    static final int DEFAULT_PORT;
    static final UnaryOperator<String> addCRCLToState;
    static final UnaryOperator<String> removeCRCLFromState;
    static final String statusHeader;
    static final String cmdHeader;
    static final String progHeader;
    static final boolean DEFAULT_JAXB_FRAGMENT;
    static final boolean DEFAULT_APPEND_TRAILING_ZERO;
    static final boolean DEFAULT_RANDOM_PACKETING;
    protected final Marshaller m_cmd;
    protected final Unmarshaller u_cmd;
    protected final Marshaller m_prog;
    protected final Unmarshaller u_prog;
    protected final Marshaller m_stat;
    protected final Unmarshaller u_stat;
    boolean appendTrailingZero;
    boolean randomPacketing;
    int rand_seed;
    static File getCrclSchemaDirFile();
    static void setUtilSocket(CRCLSocket arg0);
    static CRCLSocket getUtilSocket();
    @Nullable Socket getSocket();
    static void runSimpleServer(int arg0, CRCLSocketConsumer arg1);
    String toString();
    static CRCLProgramType readProgramFile(File arg0) throws CRCLException,IOException;
    static CRCLProgramType readProgramFile(Path arg0) throws CRCLException,IOException;
    static CRCLProgramType readProgramFile(String arg0) throws CRCLException,IOException;
    static Schema filesToCmdSchema(File[] arg0) throws CRCLException;
    static Schema getDefaultCmdSchema() throws CRCLException;
    static File[] getDefaultCmdSchemaFiles();
    static File[] getDefaultProgramSchemaFiles();
    static Schema filesToStatSchema(File[] arg0) throws CRCLException;
    static Schema getDefaultStatSchema() throws CRCLException;
    static Schema filesToProgramSchema(File[] arg0) throws CRCLException;
    static Schema getDefaultProgramSchema() throws CRCLException;
    static File getCommandXsdFile();
    @Nullable static File generateSchema(Class<?> arg0) throws CRCLException;
    @Nullable static JointStatusType getJointStatus(CRCLStatusType arg0, BigInteger arg1);
    @Nullable static JointStatusType getJointStatus(CRCLStatusType arg0, int arg1);
    static String statToDebugString(CRCLStatusType arg0);
    static void clearSchemas();
    static File[] findSchemaFiles();
    protected static void copySchemaResources();
    static Map<String,String> getSchemaVersions(String[] arg0);
    static Map<String,String> getSchemaVersions();
    static List<File> reorderStatSchemaFiles(List<File> arg0);
    static File[] reorderStatSchemaFiles(File[] arg0);
    static void main(String[] arg0);
    static Schema filesToSchema(File[] arg0) throws CRCLException;
    static File[] readStatSchemaFiles(File arg0);
    static void saveProgramSchemaFiles(File arg0, File[] arg1);
    static void saveStatSchemaFiles(File arg0, File[] arg1);
    static File[] reorderCommandSchemaFiles(File[] arg0);
    static List<File> reorderCommandSchemaFiles(List<File> arg0);
    static File[] reorderProgramSchemaFiles(File[] arg0);
    static List<File> reorderProgramSchemaFiles(List<File> arg0);
    static File[] readCmdSchemaFiles(File arg0);
    static File[] readProgramSchemaFiles(File arg0);
    static void saveCmdSchemaFiles(File arg0, File[] arg1);
    SocketChannel getSocketChannel();
    void setSocketChannel(SocketChannel arg0);
    CRCLSocket();
    CRCLSocket(Socket arg0, Schema arg1, Schema arg2, Schema arg3);
    CRCLSocket(Socket arg0);
    CRCLSocket(SocketChannel arg0);
    CRCLSocket(String arg0, int arg1) throws CRCLException,IOException;
    CRCLSocket(String arg0, int arg1, Schema arg2, Schema arg3, Schema arg4) throws CRCLException,IOException;
    boolean isConnected();
    int getLocalPort();
    int getPort();
    @Nullable InetAddress getInetAddress();
    UnaryOperator<String> getStatusStringInputFilter();
    void setStatusStringInputFilter(UnaryOperator<String> arg0);
    UnaryOperator<String> getStatusStringOutputFilter();
    void setStatusStringOutputFilter(UnaryOperator<String> arg0);
    boolean isJaxbFragment();
    void setJaxbFragment(boolean arg0);
    @Nullable String getLastStatusString();
    @Nullable String getLastCommandString();
    @Nullable Schema getProgramSchema();
    void setProgramSchema(Schema arg0);
    @Nullable Schema getCmdSchema();
    void setCmdSchema(Schema arg0);
    @Nullable Schema getStatSchema();
    void setStatSchema(Schema arg0);
    void close() throws IOException;
    protected void finalize() throws Throwable;
    String getReadInProgressString();
    String readUntilEndTag(String arg0, InputStream arg1) throws IOException;
    List<CRCLCommandInstanceType> parseMultiCommandString(String arg0) throws CRCLException;
    List<CRCLCommandInstanceType> parseMultiCommandString(String arg0, boolean arg1) throws CRCLException;
    List<CRCLStatusType> parseMultiStatusString(String arg0) throws CRCLException;
    List<CRCLStatusType> parseMultiStatusString(String arg0, boolean arg1) throws CRCLException;
    CRCLCommandInstanceType stringToCommand(String arg0, boolean arg1) throws CRCLException;
    CRCLCommandInstanceType readCommandFromStream(InputStream arg0, boolean arg1) throws JAXBException;
    CRCLProgramType stringToProgram(String arg0, boolean arg1) throws CRCLException;
    CRCLCommandInstanceType readCommand() throws CRCLException;
    CRCLCommandInstanceType readCommand(boolean arg0) throws CRCLException,IOException;
    List<CRCLCommandInstanceType> checkForCommands(boolean arg0) throws CRCLException;
    List<CRCLStatusType> checkForStatusMessages(boolean arg0) throws CRCLException;
    CRCLStatusType stringToStatus(String arg0, boolean arg1) throws CRCLException;
    CRCLStatusType readStatusFromStream(InputStream arg0, boolean arg1) throws JAXBException;
    CRCLStatusType readStatusFromSaxSource(SAXSource arg0) throws JAXBException;
    protected InputStream getBufferedInputStream() throws IOException;
    CRCLStatusType readStatus() throws CRCLException;
    CRCLStatusType readStatus(boolean arg0) throws CRCLException;
    String commandToString(CRCLCommandType arg0, boolean arg1);
    String commandToString(CRCLCommandInstanceType arg0, boolean arg1) throws CRCLException;
    String programToString(CRCLProgramType arg0, boolean arg1) throws CRCLException;
    String commandToPrettyString(CRCLCommandType arg0) throws JAXBException,CRCLException;
    String commandToPrettyString(CRCLCommandType arg0, String arg1);
    String commandInstanceToPrettyString(CRCLCommandInstanceType arg0, boolean arg1) throws JAXBException,CRCLException;
    String commandInstanceToPrettyDocString(CRCLCommandInstanceType arg0, boolean arg1) throws JAXBException;
    String programToPrettyString(CRCLProgramType arg0, boolean arg1) throws CRCLException;
    String programToPrettyDocString(CRCLProgramType arg0, boolean arg1) throws JAXBException;
    void writeCommand(CRCLCommandInstanceType arg0) throws CRCLException;
    void writeCommand(CRCLCommandInstanceType arg0, boolean arg1) throws CRCLException;
    protected void writePackets(byte[] arg0) throws IOException,InterruptedException;
    void writeWithFill(String arg0) throws IOException,InterruptedException;
    void writeProgram(CRCLProgramType arg0, boolean arg1) throws CRCLException;
    boolean isReplaceHeader();
    void setReplaceHeader(boolean arg0);
    String statusToString(CRCLStatusType arg0, boolean arg1) throws CRCLException;
    static String statusToPrettyString(CRCLStatusType arg0);
    String statusToPrettyString(CRCLStatusType arg0, boolean arg1) throws JAXBException;
    String commandToSimpleString(CRCLCommandInstanceType arg0) throws ParserConfigurationException,SAXException,IOException;
    static String cmdToString(CRCLCommandType arg0);
    static String cmdToString(CRCLCommandType arg0, int arg1, int arg2);
    static String commandToSimpleString(CRCLCommandType arg0);
    String commandToSimpleString(CRCLCommandType arg0, int arg1, int arg2) throws ParserConfigurationException,SAXException,IOException;
    static String statusToSimpleString(CRCLStatusType arg0);
    String statusToSimpleString(CRCLStatusType arg0, int arg1, int arg2);
    void writeStatus(CRCLStatusType arg0) throws CRCLException;
    void writeStatus(CRCLStatusType arg0, boolean arg1) throws CRCLException;
}
interface CRCLSocket$UnaryOperator<T> {
    T apply(T arg0);
}
class CRCLSocket$XmlToCsvHandler extends DefaultHandler {
    XmlToCsvHandler();
    int getMaxFields();
    void setMaxFields(int arg0);
    void characters(char[] arg0, int arg1, int arg2) throws SAXException;
    void endElement(String arg0, String arg1, String arg2) throws SAXException;
    String toString();
}
interface CRCLSocket$CRCLSocketConsumer {
    void accept(CRCLSocket arg0);
}
