/*
 * Copyright 2010 Red Hat, Inc. and/or its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.github.wshackle.optaplannertest.solver;
    dialect "java"

import org.optaplanner.core.api.score.buildin.hardsoftdouble.HardSoftDoubleScoreHolder;

import com.github.wshackle.optaplannertest.model.Part;
import com.github.wshackle.optaplannertest.model.Slot;
import com.github.wshackle.optaplannertest.model.Plan;

global HardSoftDoubleScoreHolder scoreHolder;

// ############################################################################
// Hard constraints
// ############################################################################


rule "multipleIndexUsed"
    when
        Part($name : name,  $i : index)
        Part(name > $name, index == $i)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end


rule "multipleSlotUsed"
    when
        Part($name : name,  $slot : slot)
        Part(name > $name, slot == $slot)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end


rule "wrongPartType"
    when
        Part($type : type,  $slot : slot, slot != null, $type != $slot.getType())
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

// ############################################################################
// Soft constraints
// ############################################################################

rule "partCost"
    when
        $part : Part($cost : cost, index != null, $i : index)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, - $cost);
end

rule "prevPartCost"
    when
        $part : Part( index != null, $i : index)
        $prevPart : Part(index == $i -1)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, - $part.getMoveFromPrevCost($prevPart));
end

rule "startCost"
    when
        $part : Part( index == 0)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, - $part.getStartCost());
end