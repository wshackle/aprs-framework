/*
 * This software is public domain software, however it is preferred
 * that the following disclaimers be attached.
 * Software Copywrite/Warranty Disclaimer
 * 
 * This software was developed at the National Institute of Standards and
 * Technology by employees of the Federal Government in the course of their
 * official duties. Pursuant to title 17 Section 105 of the United States
 * Code this software is not subject to copyright protection and is in the
 * public domain.
 * 
 * This software is experimental. NIST assumes no responsibility whatsoever 
 * for its use by other parties, and makes no guarantees, expressed or 
 * implied, about its quality, reliability, or any other characteristic. 
 * We would appreciate acknowledgement if the software is used. 
 * This software can be redistributed and/or modified freely provided 
 * that any derivative works bear some notice that they are derived from it, 
 * and any modified versions bear some notice that they have been modified.
 * 
 *  See http://www.copyright.gov/title17/92chap1.html#105
 * 
 */
package aprs.framework.pddl.executor;

import aprs.framework.AprsJFrame;
import aprs.framework.PddlAction;
import aprs.framework.database.DbSetupPublisher;
import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.concurrent.Callable;
import java.util.concurrent.CompletableFuture;

/**
 *
 * @author Will Shackleford {@literal <william.shackleford@nist.gov>}
 */
public class PddlExecutorJInternalFrame extends javax.swing.JInternalFrame  implements PddlExecutorDisplayInterface{

    /**
     * Creates new form ActionsToCrclJInternalFrame
     */
    public PddlExecutorJInternalFrame() {
        initComponents();
    }
    
    public void abortProgram() {
        actionsToCrclJPanel1.abortProgram();
    }
    
    public CompletableFuture<Void> safeAbort() {
        return this.actionsToCrclJPanel1.safeAbort();
    }
    
    public CompletableFuture<Void> continueActionList() {
        return this.actionsToCrclJPanel1.continueActionList();
    }

    public void addPositionMap(PositionMap pm) {
        actionsToCrclJPanel1.addPositionMap(pm);
    }
    
    public void removePositionMap(PositionMap pm) {
        actionsToCrclJPanel1.removePositionMap(pm);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        actionsToCrclJPanel1 = new aprs.framework.pddl.executor.PddlExecutorJPanel();

        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("PDDL Actions to CRCL (Executor)");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(actionsToCrclJPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 775, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(actionsToCrclJPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 619, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void browseActionsFile() throws IOException {
        this.actionsToCrclJPanel1.browseActionsFile();
    }

    @Override
    public List<PddlAction> getActionsList() {
        return this.actionsToCrclJPanel1.getActionsList();
    }

    @Override
    public void setActionsList(List<PddlAction> actionsList) {
        this.actionsToCrclJPanel1.setActionsList(actionsList);
    }

    @Override
    public void addAction(PddlAction action) {
        this.actionsToCrclJPanel1.addAction(action);
    }

    @Override
    public void processActions() {
        this.actionsToCrclJPanel1.processActions();
    }
    
    @Override
    public File getPropertiesFile() {
        return this.actionsToCrclJPanel1.getPropertiesFile();
    }

    @Override
    public void setPropertiesFile(File propertiesFile) {
        this.actionsToCrclJPanel1.setPropertiesFile(propertiesFile);
    }

    @Override
    public void saveProperties() throws IOException {
        this.actionsToCrclJPanel1.saveProperties();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private aprs.framework.pddl.executor.PddlExecutorJPanel actionsToCrclJPanel1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void loadProperties() throws IOException {
        this.actionsToCrclJPanel1.loadProperties();
    }

    @Override
    public void autoResizeTableColWidthsPddlOutput() {
        this.actionsToCrclJPanel1.autoResizeTableColWidthsPddlOutput();
    }

    @Override
    public boolean isLoadEnabled() {
        return actionsToCrclJPanel1.isLoadEnabled();
    }

    @Override
    public void setLoadEnabled(boolean enable) {
        actionsToCrclJPanel1.setLoadEnabled(enable);
    }

    @Override
    public void close() throws Exception {
        actionsToCrclJPanel1.close();
        this.setVisible(false);
    }
    
    public Callable<DbSetupPublisher> getDbSetupSupplier() {
        return actionsToCrclJPanel1.getDbSetupSupplier();
    }

    public void setDbSetupSupplier(Callable<DbSetupPublisher> dbSetupSupplier) {
        actionsToCrclJPanel1.setDbSetupSupplier(dbSetupSupplier);
    }

    @Override
    public void setAprsJFrame(AprsJFrame aprsJFrame) {
        actionsToCrclJPanel1.setAprsJFrame(aprsJFrame);
    }

    @Override
    public AprsJFrame getAprsJFrame() {
        return actionsToCrclJPanel1.getAprsJFrame();
    }
}
