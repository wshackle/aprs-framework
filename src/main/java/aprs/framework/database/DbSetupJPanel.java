/*
 * This software is public domain software, however it is preferred
 * that the following disclaimers be attached.
 * Software Copywrite/Warranty Disclaimer
 * 
 * This software was developed at the National Institute of Standards and
 * Technology by employees of the Federal Government in the course of their
 * official duties. Pursuant to title 17 Section 105 of the United States
 * Code this software is not subject to copyright protection and is in the
 * public domain.
 * 
 * This software is experimental. NIST assumes no responsibility whatsoever 
 * for its use by other parties, and makes no guarantees, expressed or 
 * implied, about its quality, reliability, or any other characteristic. 
 * We would appreciate acknowledgement if the software is used. 
 * This software can be redistributed and/or modified freely provided 
 * that any derivative works bear some notice that they are derived from it, 
 * and any modified versions bear some notice that they have been modified.
 * 
 *  See http://www.copyright.gov/title17/92chap1.html#105
 * 
 */
package aprs.framework.database;

import aprs.framework.spvision.VisionToDBJPanel;
import aprs.framework.DisplayInterface;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Properties;
import java.util.Set;
import java.util.TreeSet;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.ThreadFactory;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;

/**
 *
 * @author Will Shackleford {@literal <william.shackleford@nist.gov>}
 */
public class DbSetupJPanel extends javax.swing.JPanel implements DbSetupPublisher, DisplayInterface {

    /**
     * Creates new form DbSetupJPanel
     */
    public DbSetupJPanel() {
        initComponents();
        try {
            loadRecent();
        } catch (IOException ex) {
            Logger.getLogger(DbSetupJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextFieldDBPort = new javax.swing.JTextField();
        jComboBoxDbType = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jButtonConnectDB = new javax.swing.JButton();
        jButtonDisconnectDB = new javax.swing.JButton();
        jPasswordFieldDBPassword = new javax.swing.JPasswordField();
        jLabel3 = new javax.swing.JLabel();
        jTextFieldDBName = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jTextFieldDBUser = new javax.swing.JTextField();
        jTextFieldDBHost = new javax.swing.JTextField();
        jComboBox1 = new javax.swing.JComboBox<>();
        jButtonBrowse = new javax.swing.JButton();
        jButtonLoad = new javax.swing.JButton();
        jButtonSave = new javax.swing.JButton();

        jTextFieldDBPort.setText("7486");
        jTextFieldDBPort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldDBPortActionPerformed(evt);
            }
        });

        jComboBoxDbType.setModel(getDbTypeComboModel());
        jComboBoxDbType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxDbTypeActionPerformed(evt);
            }
        });

        jLabel4.setText("Database Username: ");

        jButtonConnectDB.setText("Connect To Database");
        jButtonConnectDB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConnectDBActionPerformed(evt);
            }
        });

        jButtonDisconnectDB.setText("Disconnect From Database");
        jButtonDisconnectDB.setEnabled(false);
        jButtonDisconnectDB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDisconnectDBActionPerformed(evt);
            }
        });

        jPasswordFieldDBPassword.setText("password");

        jLabel3.setText("Database Name: ");

        jTextFieldDBName.setText("neo4j");
        jTextFieldDBName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldDBNameActionPerformed(evt);
            }
        });

        jLabel1.setText("Database Host: ");

        jLabel2.setText("Database Port: ");

        jLabel16.setText("Database Type: ");

        jLabel5.setText("Database Password: ");

        jTextFieldDBUser.setText("neo4j");
        jTextFieldDBUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldDBUserActionPerformed(evt);
            }
        });

        jTextFieldDBHost.setText("localhost");

        jComboBox1.setEditable(true);

        jButtonBrowse.setText("Browse");
        jButtonBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBrowseActionPerformed(evt);
            }
        });

        jButtonLoad.setText("Load");
        jButtonLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLoadActionPerformed(evt);
            }
        });

        jButtonSave.setText("Save");
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonConnectDB, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)
                                .addGap(126, 126, 126))
                            .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonDisconnectDB, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE)
                            .addComponent(jPasswordFieldDBPassword)
                            .addComponent(jTextFieldDBUser)
                            .addComponent(jTextFieldDBName)
                            .addComponent(jTextFieldDBPort)
                            .addComponent(jTextFieldDBHost)
                            .addComponent(jComboBoxDbType, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonBrowse)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonLoad)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonSave)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(jComboBoxDbType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextFieldDBHost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextFieldDBPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextFieldDBName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jTextFieldDBUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jPasswordFieldDBPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonConnectDB)
                    .addComponent(jButtonDisconnectDB))
                .addGap(18, 18, 18)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonBrowse)
                    .addComponent(jButtonLoad)
                    .addComponent(jButtonSave))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jTextFieldDBPortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldDBPortActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldDBPortActionPerformed

    private void updateSettingsFileName() {
        String settingsFileStart = jComboBoxDbType.getSelectedItem().toString();
        if (!propertiesFile.getName().startsWith(settingsFileStart)) {
            if (Objects.toString(jComboBox1.getSelectedItem()).startsWith(settingsFileStart)) {
                return;
            }
            for (int i = 0; i < jComboBox1.getItemCount(); i++) {
                String fname = Objects.toString(jComboBox1.getItemAt(i));
                if (fname.startsWith(settingsFileStart)) {
                    jComboBox1.setSelectedIndex(i);
                    return;
                }
            }
        }
        setPropertiesFile(new File(propertiesFile.getParentFile(), settingsFileStart + ".dbsettings.txt"));
    }


    private void jComboBoxDbTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxDbTypeActionPerformed
//        try {
//            if (!savingProperties && !restoringProperties && !updatingFromArgs) {
//
//                DbType newDbType = (DbType) jComboBoxDbType.getSelectedItem();
//                if (oldDbType != newDbType) {
//                    this.closeDB();
//                    if(oldDbType != null) {
//                        saveProperties(oldDbType, jTextFieldDBHost.getText(), Integer.parseInt(jTextFieldDBPort.getText()));
//                    }
//                    restoreProperties(newDbType, null, -1);
//                    oldDbType = newDbType;
//                }
//            }
//        } catch (Exception exception) {
//            addLogMessage(exception);
//        }
        updateSettingsFileName();
        if (!updatingFromDbSetup) {
            notifyAllDbSetupListeners();
        }
    }//GEN-LAST:event_jComboBoxDbTypeActionPerformed

    private void jButtonConnectDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConnectDBActionPerformed
//        connectDB();
        connected = true;
        notifyAllDbSetupListeners();
    }//GEN-LAST:event_jButtonConnectDBActionPerformed

    private void jButtonDisconnectDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDisconnectDBActionPerformed
//        this.closeDB();
        connected = false;
        notifyAllDbSetupListeners();
    }//GEN-LAST:event_jButtonDisconnectDBActionPerformed

    private void jTextFieldDBNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldDBNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldDBNameActionPerformed

    private void jTextFieldDBUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldDBUserActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldDBUserActionPerformed

    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed
        this.setPropertiesFile(new File(jComboBox1.getSelectedItem().toString()));
        DbSetupBuilder.savePropertiesFile(propertiesFile, getDbSetup());
        this.notifyAllDbSetupListeners();
    }//GEN-LAST:event_jButtonSaveActionPerformed

    private void jButtonLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLoadActionPerformed
        this.setPropertiesFile(new File(jComboBox1.getSelectedItem().toString()));
        DbSetup newSetup = DbSetupBuilder.loadFromPropertiesFile(propertiesFile).build();
        this.setDbSetup(newSetup);
        this.notifyAllDbSetupListeners();
    }//GEN-LAST:event_jButtonLoadActionPerformed

    private void jButtonBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBrowseActionPerformed
        JFileChooser chooser = new JFileChooser(propertiesFile.getParentFile());
        if (chooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            this.setPropertiesFile(chooser.getSelectedFile());
        }
    }//GEN-LAST:event_jButtonBrowseActionPerformed

    private boolean connected = false;
    private volatile boolean updatingFromDbSetup = false;

    public void setDbSetup(DbSetup setup) {
        try {
            updatingFromDbSetup = true;
            DbType dbtype = setup.getDbType();
            if (!Objects.equals(dbtype, this.jComboBoxDbType.getSelectedItem())) {
                this.jComboBoxDbType.setSelectedItem(dbtype);
            }
            String host = setup.getHost();
            if (!Objects.equals(host, jTextFieldDBHost.getText())) {
                this.jTextFieldDBHost.setText(setup.getHost());
            }
            int port = setup.getPort();
            int curport = -99;
            try {
                curport = Integer.parseInt(jTextFieldDBPort.getText());
            } catch (Exception e) {
                // deliberately ignored
            }
            if (curport != port) {
                this.jTextFieldDBPort.setText(Integer.toString(port));
            }
            char curpasswd[] = jPasswordFieldDBPassword.getPassword();
            char newpasswd[] = setup.getDbPassword();
            if (!Arrays.equals(curpasswd, newpasswd)) {
                this.jPasswordFieldDBPassword.setText(new String(newpasswd));
            }
            String user = setup.getDbUser();
            if (user != null && !Objects.equals(user, jTextFieldDBUser.getText())) {
                this.jTextFieldDBUser.setText(user);
            }
            String dbname = setup.getDbName();
            if (dbname != null && !Objects.equals(user, jTextFieldDBName.getText())) {
                this.jTextFieldDBName.setText(dbname);
            }
            this.connected = setup.isConnected();
            if (jButtonConnectDB.isEnabled() != (!connected)) {
                this.jButtonConnectDB.setEnabled(!connected);
            }
            if (jButtonDisconnectDB.isEnabled() != connected) {
                this.jButtonDisconnectDB.setEnabled(connected);
            }
        } finally {
            updatingFromDbSetup = false;
        }
    }

    public DbSetup getDbSetup() {
        return new DbSetupBuilder()
                .connected(connected)
                .type((DbType) jComboBoxDbType.getSelectedItem())
                .host(jTextFieldDBHost.getText())
                .passwd(jPasswordFieldDBPassword.getPassword())
                .dbname(jTextFieldDBName.getText())
                .user(jTextFieldDBUser.getText())
                .port(Integer.parseInt(jTextFieldDBPort.getText()))
                .build();
    }

    private ExecutorService notifyService = Executors.newSingleThreadExecutor(new ThreadFactory() {
        @Override
        public Thread newThread(Runnable r) {
            Thread thread = new Thread(r, "dbSetupNotifyThread");
            thread.setDaemon(true);
            return thread;
        }
    });

    public void notifyAllDbSetupListeners() {
        if (notifyService != null) {
            final DbSetup thisDbSetup = DbSetupJPanel.this.getDbSetup();
            notifyService.submit(new Runnable() {
                @Override
                public void run() {
                    for (DbSetupListener listener : dbSetupListeners) {
                        if (null != listener) {
                            listener.accept(thisDbSetup);
                        }
                    }
                }
            });
        }
    }

    private void addComboItemUnique(String item) {
        for (int i = 0; i < jComboBox1.getItemCount(); i++) {
            if (Objects.equals(jComboBox1.getItemAt(i), item)) {
                return;
            }
        }
        jComboBox1.addItem(item);
    }

    private void loadRecent() throws IOException {
        if (null != recentSettingsFile && recentSettingsFile.exists()) {
            TreeSet<String> set = new TreeSet<>();
            try (BufferedReader br = new BufferedReader(new FileReader(recentSettingsFile))) {
                String line;
                while (null != (line = br.readLine())) {
                    set.add(line.trim());
                }
            }
            jComboBox1.removeAllItems();
            try (PrintWriter pw = new PrintWriter(new FileWriter(recentSettingsFile))) {
                for (String p : set) {
                    pw.println(p);
                    addComboItemUnique(p);
                }
            }
        }
    }
    private File recentSettingsFile = new File(System.getProperty("user.home"), ".dbsetup_recent.txt");
    private File propertiesFile = new File(System.getProperty("user.home"), ".dbsetup_properties.txt");

    @Override
    public void setPropertiesFile(File f) {
        try {
            propertiesFile = f;
            String newPath = propertiesFile.getCanonicalPath();
            addComboItemUnique(newPath);
            jComboBox1.setSelectedItem(newPath);
            saveRecent(recentSettingsFile, newPath);
        } catch (IOException iOException) {
            Logger.getLogger(DbSetupJPanel.class.getName()).log(Level.SEVERE, null, iOException);
        }
    }

    private void saveRecent(File f, String newPath) throws IOException {
        recentSettingsFile.getParentFile().mkdirs();
        try (PrintWriter fw = new PrintWriter(new FileWriter(f, true))) {
            fw.println(newPath);
        }
    }

    @Override
    public File getPropertiesFile() {
        return propertiesFile;
    }
    private volatile boolean savingProperties = false;

    @Override
    public void saveProperties() {
        DbSetup setup = this.getDbSetup();
        saveProperties(setup.getDbType(), setup.getHost(), setup.getPort());
    }

    public void saveProperties(DbType dbtype, String host, int port) {
        try {
            savingProperties = true;
            propertiesFile.getParentFile().mkdirs();
            Properties props = new Properties();
            if (propertiesFile.exists()) {
                try (FileReader fr = new FileReader(propertiesFile)) {
                    props.load(fr);
                } catch (IOException ex) {
                    Logger.getLogger(VisionToDBJPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            props.putAll(updateArgsMap(dbtype));
            DbSetup setup = this.getDbSetup();
            if (host == null) {
                host = setup.getHost();
            }
            if (port < 1) {
                port = setup.getPort();
            }
            props.put(dbtype + ".host", host);
            props.put(dbtype + "." + host + ".port", Integer.toString(port));
            String dbHostPort = String.format("%s.%s_%d", dbtype.toString(), host, port);
            props.put(dbHostPort + ".name", setup.getDbName());
            props.put(dbHostPort + ".user", setup.getDbUser());
            props.put(dbHostPort + ".passwd", new String(setup.getDbPassword()));
            try (FileWriter fw = new FileWriter(propertiesFile)) {
                props.store(fw, "");
            } catch (IOException ex) {
                Logger.getLogger(VisionToDBJPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        } finally {
            savingProperties = false;
        }
    }

    private volatile boolean restoringProperties = false;

    public Map<String, String> updateArgsMap() {
        return updateArgsMap(this.getDbSetup().getDbType());
    }

    public Map<String, String> updateArgsMap(DbType dbtype) {
        Map<String, String> argsMap = Main.getArgsMap();
        DbSetup curSetup = this.getDbSetup();
        argsMap.put("--dbhost", curSetup.getHost());
        argsMap.put("--dbport", Integer.toString(curSetup.getPort()));
        argsMap.put("--dbname", curSetup.getDbName());
        argsMap.put("--dbuser", curSetup.getDbUser());
        argsMap.put("--dbpasswd",
                new String(curSetup.getDbPassword()));
        argsMap.put("--dbtype", curSetup.getDbType().toString());
        return argsMap;
    }

    public final void restoreProperties(DbType dbtype, String host, int port) {
        try {
            restoringProperties = true;
            if (null != propertiesFile && propertiesFile.exists()) {
                Properties props = new Properties();
                try (FileReader fr = new FileReader(propertiesFile)) {
                    props.load(fr);
                } catch (IOException ex) {
                    Logger.getLogger(VisionToDBJPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
                Map<String, String> argsMap = Main.getArgsMap();
                for (String propName : props.stringPropertyNames()) {
                    argsMap.put(propName, props.getProperty(propName));
                }
                updateFromArgs(argsMap, dbtype, host, port, null);
            }
        } catch (Exception e) {
            addLogMessage(e);
        } finally {
            restoringProperties = false;
        }
    }

    public void addLogMessage(Exception e) {
        e.printStackTrace();
    }

    public void addLogMessage(String msg) {
        System.err.println(msg);
    }

    public DbType getDbType() {
        return (DbType) jComboBoxDbType.getSelectedItem();
    }

    private volatile boolean updatingFromArgs = false;

    private void updateFromArgs(Map<String, String> _argsMap, DbType dbtype, String host, int port, DbSetup curSetup) {
        try {
            updatingFromArgs = true;
//            setText(_argsMap, this.jTextFieldDBName, "--dbname");
//            setText(_argsMap, this.jTextFieldDBUser, "--dbuser");
//            setText(_argsMap, this.jPasswordFieldDBPassword, "--dbpasswd");
            DbSetupBuilder builder = new DbSetupBuilder()
                    .type(dbtype)
                    .host(host)
                    .port(port)
                    .dbname(_argsMap.get("--dbname"))
                    .user(_argsMap.get("--dbuser"))
                    .passwd(_argsMap.getOrDefault("--dbpasswd", "").toCharArray());

//            DbSetup origSetup = curSetup != null? curSetup : dbSetupJPanel1.getDbSetup();
            if (null == host) {
                String dbSpecificHost = _argsMap.get(dbtype + ".host");
                if (null != dbSpecificHost) {
                    builder = builder.host(dbSpecificHost);
                    host = dbSpecificHost;
                }
                if (host == null) {
                    if (null == curSetup) {
                        curSetup = this.getDbSetup();
                    }
                    host = curSetup.getHost();
                }
                String dbSpecificPort = _argsMap.get(this.getDbType() + "." + host + ".port");
                if (null != dbSpecificPort) {

                    port = Integer.parseInt(dbSpecificPort);
                    builder = builder.port(port);
                }
            }
            if (port < 1) {
                if (host == null) {
                    if (null == curSetup) {
                        curSetup = this.getDbSetup();
                    }
                    host = curSetup.getHost();
                }
                String dbSpecificPort = _argsMap.get(this.getDbType() + "." + host + ".port");
                if (null != dbSpecificPort) {
//                    this.jTextFieldDBPort.setText(dbSpecificPort);
                    port = Integer.parseInt(dbSpecificPort);
                    builder = builder.port(port);
                }
            }
            String dbHostPort = String.format("%s.%s_%d", dbtype.toString(), host, port);
            String dbSpecificName = _argsMap.get(dbHostPort + ".name");
            if (null != dbSpecificName) {
                builder = builder.dbname(dbSpecificName);
            }
            String dbSpecificUser = _argsMap.get(dbHostPort + ".user");
            if (null != dbSpecificUser) {
                builder = builder.user(dbSpecificUser);
            }
            String dbSpecificPasswd = _argsMap.get(dbHostPort + ".passwd");
            if (null != dbSpecificUser) {
                builder = builder.passwd(dbSpecificPasswd.toCharArray());
            }
            this.setDbSetup(builder.build());
        } finally {
            updatingFromArgs = false;
        }
//        props.put(this.getDbType() + ".host", this.jTextFieldDBHost.getText());
//        props.put(this.getDbType() + "."+this.jTextFieldDBHost.getText()+".port", this.jTextFieldDBPort.getText());
//        props.put(this.getDbType() + "."+this.jTextFieldDBHost.getText()+".name", this.jTextFieldDBName.getText());
//        props.put(this.getDbType() + "."+this.jTextFieldDBHost.getText()+".user", this.jTextFieldDBUser.getText());
//        props.put(this.getDbType() + "."+this.jTextFieldDBHost.getText()+".passwd", this.jPasswordFieldDBPassword.getPassword());
//        
    }

    public void updateFromArgs(Map<String, String> _argsMap) {
        try {
            updatingFromArgs = true;
            String host = _argsMap.get("--dbhost");
            int port = Integer.parseInt(_argsMap.get("--dbport"));
            String argsMapDbTypeString = _argsMap.get("--dbtype");
            DbSetup curSetup = null;
            DbType dbtype = null;
            if (argsMapDbTypeString == null || argsMapDbTypeString.length() < 1) {
                curSetup = this.getDbSetup();
                dbtype = curSetup.getDbType();
            } else {
                dbtype = DbType.valueOf(argsMapDbTypeString);
            }
            DbSetupBuilder builder = new DbSetupBuilder()
                    .type(dbtype)
                    .host(host)
                    .port(port)
                    .dbname(_argsMap.get("--dbname"))
                    .user(_argsMap.get("--dbuser"))
                    .passwd(_argsMap.getOrDefault("--dbpasswd", "").toCharArray());
//            setText(_argsMap, this.jTextFieldDBHost, "--dbhost");
//            setText(_argsMap, this.jTextFieldDBPort, "--dbport");
//            setText(_argsMap, this.jTextFieldDBHost, "--dbhost");
//            setText(_argsMap, this.jTextFieldDBPort, "--dbport");
//            this.jComboBoxDbType.setSelectedItem(DbType.valueOf(_argsMap.get("--dbtype")));
            String dbSpecificHost = _argsMap.get(dbtype + ".host");
            if (null != dbSpecificHost) {
//                this.jTextFieldDBHost.setText(dbSpecificHost);
                builder = builder.host(dbSpecificHost);
                host = dbSpecificHost;
            }
            String dbSpecificPort = _argsMap.get(dbtype + "." + host + ".port");
            if (null != dbSpecificPort) {
//                this.jTextFieldDBPort.setText(dbSpecificPort);
                port = Integer.parseInt(dbSpecificPort);
                builder = builder.port(port);
            }
            updateFromArgs(_argsMap, dbtype, host, port, curSetup);

        } finally {
            updatingFromArgs = false;
        }
//        props.put(this.getDbType() + ".host", this.jTextFieldDBHost.getText());
//        props.put(this.getDbType() + "."+this.jTextFieldDBHost.getText()+".port", this.jTextFieldDBPort.getText());
//        props.put(this.getDbType() + "."+this.jTextFieldDBHost.getText()+".name", this.jTextFieldDBName.getText());
//        props.put(this.getDbType() + "."+this.jTextFieldDBHost.getText()+".user", this.jTextFieldDBUser.getText());
//        props.put(this.getDbType() + "."+this.jTextFieldDBHost.getText()+".passwd", this.jPasswordFieldDBPassword.getPassword());
//        
    }

    @Override
    public final void loadProperties() {
        try {
            restoringProperties = true;
            if (null != propertiesFile && propertiesFile.exists()) {
                Properties props = new Properties();
                try (FileReader fr = new FileReader(propertiesFile)) {
                    props.load(fr);
                } catch (IOException ex) {
                    Logger.getLogger(VisionToDBJPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
                Map<String, String> argsMap = Main.getArgsMap();
                for (String propName : props.stringPropertyNames()) {
                    argsMap.put(propName, props.getProperty(propName));
                }
                updateFromArgs(argsMap);
            }
        } catch (Exception e) {
            addLogMessage(e);
        } finally {
            restoringProperties = false;
        }
    }

    @Override
    public void close() throws Exception {
    }

    Set<DbSetupListener> dbSetupListeners = new HashSet<>();

    public void addDbSetupListener(DbSetupListener listener) {
        dbSetupListeners.add(listener);
    }

    public void removeDbSetupListener(DbSetupListener listener) {
        dbSetupListeners.remove(listener);
    }

    private final DefaultComboBoxModel<DbType> dbTypeComboModel = new DefaultComboBoxModel<>(DbType.values());

    public DefaultComboBoxModel<DbType> getDbTypeComboModel() {
        return dbTypeComboModel;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonBrowse;
    private javax.swing.JButton jButtonConnectDB;
    private javax.swing.JButton jButtonDisconnectDB;
    private javax.swing.JButton jButtonLoad;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<aprs.framework.database.DbType> jComboBoxDbType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPasswordField jPasswordFieldDBPassword;
    private javax.swing.JTextField jTextFieldDBHost;
    private javax.swing.JTextField jTextFieldDBName;
    private javax.swing.JTextField jTextFieldDBPort;
    private javax.swing.JTextField jTextFieldDBUser;
    // End of variables declaration//GEN-END:variables
}
