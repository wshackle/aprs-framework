/*
 * This software is public domain software, however it is preferred
 * that the following disclaimers be attached.
 * Software Copywrite/Warranty Disclaimer
 * 
 * This software was developed at the National Institute of Standards and
 * Technology by employees of the Federal Government in the course of their
 * official duties. Pursuant to title 17 Section 105 of the United States
 * Code this software is not subject to copyright protection and is in the
 * public domain.
 * 
 * This software is experimental. NIST assumes no responsibility whatsoever 
 * for its use by other parties, and makes no guarantees, expressed or 
 * implied, about its quality, reliability, or any other characteristic. 
 * We would appreciate acknowledgement if the software is used. 
 * This software can be redistributed and/or modified freely provided 
 * that any derivative works bear some notice that they are derived from it, 
 * and any modified versions bear some notice that they have been modified.
 * 
 *  See http://www.copyright.gov/title17/92chap1.html#105
 * 
 */
package aprs.framework.database;

import aprs.framework.spvision.VisionToDBJPanel;
import aprs.framework.DisplayInterface;
import aprs.framework.Utils;
import static aprs.framework.Utils.autoResizeTableColWidths;
import java.awt.Component;
import java.awt.Dimension;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.EnumMap;
import java.util.EventObject;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Properties;
import java.util.Set;
import java.util.TreeSet;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.ThreadFactory;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.event.CellEditorListener;
import javax.swing.event.ChangeEvent;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;

/**
 *
 * @author Will Shackleford {@literal <william.shackleford@nist.gov>}
 */
public class DbSetupJPanel extends javax.swing.JPanel implements DbSetupPublisher, DisplayInterface {

    /**
     * Creates new form DbSetupJPanel
     */
    public DbSetupJPanel() {
        initComponents();
        try {
            loadRecent();
        } catch (IOException ex) {
            Logger.getLogger(DbSetupJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        editTableArea = new JTextArea();
        viewAreas = new ArrayList<>();
        setupMultiLineTable(jTableQueries, 1, editTableArea, viewAreas);
    }

//    private static List<String> getClasspathEntriesByPath(String path) throws IOException {
//        InputStream is = DbMain.class.getClassLoader().getResourceAsStream(path);
//        if(null == is) {
//            return null;
//        }
//        StringBuilder sb = new StringBuilder();
//        while (is.available() > 0) {
//            byte[] buffer = new byte[1024];
//            sb.append(new String(buffer, Charset.defaultCharset()));
//        }
//
//        return Arrays
//                .asList(sb.toString().split("\n")) // Convert StringBuilder to individual lines
//                .stream() // Stream the list
//                .filter(line -> line.trim().length() > 0) // Filter out empty lines
//                .collect(Collectors.toList());              // Collect remaining lines into a List again
//    }
    JTextArea editTableArea = null;
    List<JTextArea> viewAreas = null;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupQueryDirType = new javax.swing.ButtonGroup();
        jTextFieldDBPort = new javax.swing.JTextField();
        jComboBoxDbType = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jButtonConnectDB = new javax.swing.JButton();
        jButtonDisconnectDB = new javax.swing.JButton();
        jPasswordFieldDBPassword = new javax.swing.JPasswordField();
        jLabel3 = new javax.swing.JLabel();
        jTextFieldDBName = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jTextFieldDBUser = new javax.swing.JTextField();
        jTextFieldDBHost = new javax.swing.JTextField();
        jComboBoxPropertiesFiles = new javax.swing.JComboBox<>();
        jButtonBrowse = new javax.swing.JButton();
        jButtonLoad = new javax.swing.JButton();
        jButtonSave = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableQueries = new javax.swing.JTable();
        jRadioButtonResourceDir = new javax.swing.JRadioButton();
        jComboBoxResourceDir = new javax.swing.JComboBox<>();
        jRadioButtonExternDir = new javax.swing.JRadioButton();
        jTextFieldQueriesDirectory = new javax.swing.JTextField();
        jButtonBrowseExternalDirectory = new javax.swing.JButton();
        jButtonLoadExternalDirectory = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextAreaConnectErrors = new javax.swing.JTextArea();
        jCheckBoxDebug = new javax.swing.JCheckBox();

        jTextFieldDBPort.setText("7486");

        jComboBoxDbType.setModel(getDbTypeComboModel());
        jComboBoxDbType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxDbTypeActionPerformed(evt);
            }
        });

        jLabel4.setText("Database Username: ");

        jButtonConnectDB.setText("Connect To Database");
        jButtonConnectDB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConnectDBActionPerformed(evt);
            }
        });

        jButtonDisconnectDB.setText("Disconnect From Database");
        jButtonDisconnectDB.setEnabled(false);
        jButtonDisconnectDB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDisconnectDBActionPerformed(evt);
            }
        });

        jPasswordFieldDBPassword.setText("password");

        jLabel3.setText("Database Name: ");

        jTextFieldDBName.setText("neo4j");
        jTextFieldDBName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldDBNameActionPerformed(evt);
            }
        });

        jLabel1.setText("Database Host: ");

        jLabel2.setText("Database Port: ");

        jLabel16.setText("Database Type: ");

        jLabel5.setText("Database Password: ");

        jTextFieldDBUser.setText("neo4j");
        jTextFieldDBUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldDBUserActionPerformed(evt);
            }
        });

        jTextFieldDBHost.setText("localhost");

        jComboBoxPropertiesFiles.setEditable(true);

        jButtonBrowse.setText("Browse");
        jButtonBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBrowseActionPerformed(evt);
            }
        });

        jButtonLoad.setText("Load");
        jButtonLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLoadActionPerformed(evt);
            }
        });

        jButtonSave.setText("Save");
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Queries"));

        jTableQueries.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Type", "Text"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTableQueries);

        buttonGroupQueryDirType.add(jRadioButtonResourceDir);
        jRadioButtonResourceDir.setSelected(true);
        jRadioButtonResourceDir.setText("Resource Directory: ");

        jComboBoxResourceDir.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "mysql", "mysql_simple", "neo4j/v1", "neo4j/v2", " " }));
        jComboBoxResourceDir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxResourceDirActionPerformed(evt);
            }
        });

        buttonGroupQueryDirType.add(jRadioButtonExternDir);
        jRadioButtonExternDir.setText("External Directory: ");

        jTextFieldQueriesDirectory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldQueriesDirectoryActionPerformed(evt);
            }
        });

        jButtonBrowseExternalDirectory.setText("Browse");
        jButtonBrowseExternalDirectory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBrowseExternalDirectoryActionPerformed(evt);
            }
        });

        jButtonLoadExternalDirectory.setText("Load");
        jButtonLoadExternalDirectory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLoadExternalDirectoryActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jRadioButtonResourceDir)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxResourceDir, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButtonExternDir)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldQueriesDirectory, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonLoadExternalDirectory)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonBrowseExternalDirectory)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 199, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jRadioButtonResourceDir)
                    .addComponent(jComboBoxResourceDir, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonExternDir)
                    .addComponent(jTextFieldQueriesDirectory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonBrowseExternalDirectory)
                    .addComponent(jButtonLoadExternalDirectory))
                .addContainerGap())
        );

        jTextAreaConnectErrors.setColumns(20);
        jTextAreaConnectErrors.setRows(5);
        jScrollPane2.setViewportView(jTextAreaConnectErrors);

        jCheckBoxDebug.setText("Debug");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboBoxPropertiesFiles, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonConnectDB, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(126, 126, 126))
                            .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonDisconnectDB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPasswordFieldDBPassword)
                            .addComponent(jTextFieldDBUser)
                            .addComponent(jTextFieldDBName)
                            .addComponent(jTextFieldDBPort)
                            .addComponent(jTextFieldDBHost)
                            .addComponent(jComboBoxDbType, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonBrowse)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonLoad)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonSave)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jCheckBoxDebug)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(jComboBoxDbType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextFieldDBHost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextFieldDBPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextFieldDBName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jTextFieldDBUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jPasswordFieldDBPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonConnectDB)
                    .addComponent(jButtonDisconnectDB))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxPropertiesFiles, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonBrowse)
                    .addComponent(jButtonLoad)
                    .addComponent(jButtonSave)
                    .addComponent(jCheckBoxDebug))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void updateSettingsFileName() {
        String settingsFileStart = jComboBoxDbType.getSelectedItem().toString();
        if (!propertiesFile.getName().startsWith(settingsFileStart)) {
            if (Objects.toString(jComboBoxPropertiesFiles.getSelectedItem()).startsWith(settingsFileStart)) {
                return;
            }
            for (int i = 0; i < jComboBoxPropertiesFiles.getItemCount(); i++) {
                String fname = Objects.toString(jComboBoxPropertiesFiles.getItemAt(i));
                if (fname.startsWith(settingsFileStart)) {
                    jComboBoxPropertiesFiles.setSelectedIndex(i);
                    return;
                }
            }
        }
        setPropertiesFile(new File(propertiesFile.getParentFile(), settingsFileStart + ".dbsettings.txt"));
    }


    private void jComboBoxDbTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxDbTypeActionPerformed
//        try {
//            if (!savingProperties && !restoringProperties && !updatingFromArgs) {
//
//                DbType newDbType = (DbType) jComboBoxDbType.getSelectedItem();
//                if (oldDbType != newDbType) {
//                    this.closeDB();
//                    if(oldDbType != null) {
//                        saveProperties(oldDbType, jTextFieldDBHost.getText(), Integer.parseInt(jTextFieldDBPort.getText()));
//                    }
//                    restoreProperties(newDbType, null, -1);
//                    oldDbType = newDbType;
//                }
//            }
//        } catch (Exception exception) {
//            addLogMessage(exception);
//        }
        updateSettingsFileName();
        if (!updatingFromDbSetup) {
            notifyAllDbSetupListeners();
        }
    }//GEN-LAST:event_jComboBoxDbTypeActionPerformed

    private void jButtonConnectDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConnectDBActionPerformed
        try {
            //        connectDB();
            connected = true;
            DbSetup setup = this.getDbSetup();
            DbSetupBuilder.connect(setup);
            notifyAllDbSetupListeners();
            jTextAreaConnectErrors.setText("Connected to database of type " + setup.getDbType() + "\n as user " + setup.getDbUser() + " on host " + setup.getHost() + "\n with port " + setup.getPort() + "\n using queries from " + setup.getQueriesDir());
        } catch (Exception ex) {
            jTextAreaConnectErrors.setText(ex + "\nCaused by :\n" + ex.getCause());
            Logger.getLogger(DbSetupJPanel.class.getName()).log(Level.SEVERE, null, ex);
            connected = false;
        }
    }//GEN-LAST:event_jButtonConnectDBActionPerformed

    private void jButtonDisconnectDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDisconnectDBActionPerformed
//        this.closeDB();
        connected = false;
        notifyAllDbSetupListeners();
        System.out.println("Disconnected from database.");
        jTextAreaConnectErrors.setText("Disconnected from database.");
    }//GEN-LAST:event_jButtonDisconnectDBActionPerformed

    private void jTextFieldDBNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldDBNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldDBNameActionPerformed

    private void jTextFieldDBUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldDBUserActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldDBUserActionPerformed

    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed
        this.setPropertiesFile(new File(jComboBoxPropertiesFiles.getSelectedItem().toString()));
        DbSetupBuilder.savePropertiesFile(propertiesFile, getDbSetup());
        this.notifyAllDbSetupListeners();
    }//GEN-LAST:event_jButtonSaveActionPerformed

    private void jButtonLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLoadActionPerformed
        this.setPropertiesFile(new File(jComboBoxPropertiesFiles.getSelectedItem().toString()));
        DbSetup newSetup = DbSetupBuilder.loadFromPropertiesFile(propertiesFile).build();
        this.setDbSetup(newSetup);
        this.notifyAllDbSetupListeners();
    }//GEN-LAST:event_jButtonLoadActionPerformed

    private void jButtonBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBrowseActionPerformed
        JFileChooser chooser = new JFileChooser(propertiesFile.getParentFile());
        if (chooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            this.setPropertiesFile(chooser.getSelectedFile());
        }
    }//GEN-LAST:event_jButtonBrowseActionPerformed

    private void jComboBoxResourceDirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxResourceDirActionPerformed
        try {
            String resDirSuffix = this.jComboBoxResourceDir.getSelectedItem().toString();
            jComboBoxResourceDir.setSelectedItem(resDirSuffix);

            if (resDirSuffix == null) {
                resDirSuffix = "neo4j/v1/";
            }
            if (!resDirSuffix.startsWith("/")) {
                resDirSuffix = "/" + resDirSuffix;
            }
            if (!resDirSuffix.endsWith("/")) {
                resDirSuffix = resDirSuffix + "/";
            }
            String resDir = RESOURCE_BASE + resDirSuffix;
            Map<DbQueryEnum, DbQueryInfo> queriesMap
                    = DbSetupBuilder.readResourceQueriesDirectory(resDir);
            loadQueriesMap(queriesMap, () -> {
                if (!updatingFromDbSetup) {
                    notifyAllDbSetupListeners();
                }
            });

        } catch (IOException iOException) {
            Logger.getLogger(DbSetupJPanel.class.getName()).log(Level.SEVERE, null, iOException);
        }
    }//GEN-LAST:event_jComboBoxResourceDirActionPerformed

    private void jButtonBrowseExternalDirectoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBrowseExternalDirectoryActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File f = chooser.getSelectedFile();
            loadExternalQueriesDirectory(f);
        }
    }//GEN-LAST:event_jButtonBrowseExternalDirectoryActionPerformed

    private void jButtonLoadExternalDirectoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLoadExternalDirectoryActionPerformed
        loadExternalQueriesDirectory(new File(jTextFieldQueriesDirectory.getText()));
    }//GEN-LAST:event_jButtonLoadExternalDirectoryActionPerformed

    private void jTextFieldQueriesDirectoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldQueriesDirectoryActionPerformed
        loadExternalQueriesDirectory(new File(jTextFieldQueriesDirectory.getText()));
    }//GEN-LAST:event_jTextFieldQueriesDirectoryActionPerformed

    private void loadExternalQueriesDirectory(File f) {
        try {
            if (!jTextFieldQueriesDirectory.getText().equals(f.getCanonicalPath())) {
                jTextFieldQueriesDirectory.setText(f.getCanonicalPath());
            }
            jRadioButtonExternDir.setSelected(true);
            Map<DbQueryEnum, DbQueryInfo> queriesMap
                    = DbSetupBuilder.readQueriesDirectory(f.getAbsolutePath());
            loadQueriesMap(queriesMap, null);
        } catch (IOException ex) {
            Logger.getLogger(DbSetupJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private boolean debug = false;

    private boolean connected = false;
    private volatile boolean updatingFromDbSetup = false;

    public void setDbSetup(DbSetup setup) {
        try {
            if (null == setup) {
                return;
            }
            jCheckBoxDebug.setSelected(setup.isDebug());
            updatingFromDbSetup = true;
            DbType dbtype = setup.getDbType();
            if (!Objects.equals(dbtype, this.jComboBoxDbType.getSelectedItem())) {
                this.jComboBoxDbType.setSelectedItem(dbtype);
            }
            String host = setup.getHost();
            if (!Objects.equals(host, jTextFieldDBHost.getText())) {
                this.jTextFieldDBHost.setText(setup.getHost());
            }
            int port = setup.getPort();
            int curport = -99;
            try {
                curport = Integer.parseInt(jTextFieldDBPort.getText());
            } catch (Exception e) {
                // deliberately ignored
            }
            if (curport != port) {
                this.jTextFieldDBPort.setText(Integer.toString(port));
            }
            char curpasswd[] = jPasswordFieldDBPassword.getPassword();
            char newpasswd[] = setup.getDbPassword();
            if (!Arrays.equals(curpasswd, newpasswd)) {
                this.jPasswordFieldDBPassword.setText(new String(newpasswd));
            }
            String user = setup.getDbUser();
            if (user != null && !Objects.equals(user, jTextFieldDBUser.getText())) {
                this.jTextFieldDBUser.setText(user);
            }
            String dbname = setup.getDbName();
            if (dbname != null && !Objects.equals(user, jTextFieldDBName.getText())) {
                this.jTextFieldDBName.setText(dbname);
            }
            this.connected = setup.isConnected();
            if (jButtonConnectDB.isEnabled() != (!connected)) {
                this.jButtonConnectDB.setEnabled(!connected);
            }
            if (jButtonDisconnectDB.isEnabled() != connected) {
                this.jButtonDisconnectDB.setEnabled(connected);
            }
            boolean internal = setup.isInternalQueriesResourceDir();
            if (internal != this.jRadioButtonResourceDir.isSelected()) {
                jRadioButtonResourceDir.setSelected(internal);
            }
            if (internal == this.jRadioButtonExternDir.isSelected()) {
                jRadioButtonExternDir.setSelected(!internal);
            }
            String queryDir = setup.getQueriesDir();
            boolean queriesMapReloaded = false;
            if (null != queryDir) {
                if (internal) {
                    jComboBoxResourceDir.setSelectedItem(queryDir);
                } else if (!Objects.equals(queryDir, jTextFieldQueriesDirectory.getText())) {
                    loadExternalQueriesDirectory(new File(queryDir));
                    queriesMapReloaded = true;
                }
            }
            if (!queriesMapReloaded) {
                Map<DbQueryEnum, DbQueryInfo> queriesMap = setup.getQueriesMap();
                if (null != queriesMap) {
                    loadQueriesMap(queriesMap, null);
                }
            }
        } finally {
            updatingFromDbSetup = false;
        }
    }

    private void loadQueriesMapInternal(Map<DbQueryEnum, DbQueryInfo> queriesMap, Runnable r) {
        DefaultTableModel model = (DefaultTableModel) jTableQueries.getModel();
        model.setRowCount(0);
        for (Map.Entry<DbQueryEnum, DbQueryInfo> entry : queriesMap.entrySet()) {
            model.addRow(new Object[]{entry.getKey(), entry.getValue().getOrigText()});
        }
        autoResizeTableColWidths(jTableQueries);
        autoResizeTableRowHeights(jTableQueries);
        if (null != r) {
            r.run();
        }
    }

    private void loadQueriesMap(Map<DbQueryEnum, DbQueryInfo> queriesMap, Runnable r) {
        Utils.runOnDispatchThread(() -> loadQueriesMapInternal(queriesMap, r));
    }

    public void setupMultiLineTable(JTable jTable,
            int multiLineColumnIndex,
            JTextArea editTableArea,
            List<JTextArea> viewAreas) {
        jTable.getColumnModel().getColumn(multiLineColumnIndex).setCellRenderer(new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                while (viewAreas.size() <= row) {
                    JTextArea area = new JTextArea();
                    area.setOpaque(true);
                    area.setVisible(true);
                    viewAreas.add(area);
                }
                if (null == viewAreas.get(row)) {
                    JTextArea area = new JTextArea();
                    area.setOpaque(true);
                    area.setVisible(true);
                    viewAreas.set(row, area);
                }

                viewAreas.get(row).setText(Objects.toString(value));
                return viewAreas.get(row);
            }

        });
        jTable.getColumnModel().getColumn(multiLineColumnIndex).setCellEditor(new TableCellEditor() {

            private List<CellEditorListener> listeners = new ArrayList<>();

            @Override
            public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
                editTableArea.setOpaque(true);
                editTableArea.setVisible(true);
                editTableArea.setText(value.toString());
                return editTableArea;
            }

            @Override
            public Object getCellEditorValue() {
                return editTableArea.getText();
            }

            @Override
            public boolean isCellEditable(EventObject anEvent) {
                return true;
            }

            @Override
            public boolean shouldSelectCell(EventObject anEvent) {
                return true;
            }

            @Override
            public boolean stopCellEditing() {
                for (int i = 0; i < listeners.size(); i++) {
                    CellEditorListener l = listeners.get(i);
                    if (null != l) {
                        l.editingStopped(new ChangeEvent(jTable));
                    }
                }
                return true;
            }

            @Override
            public void cancelCellEditing() {
                for (int i = 0; i < listeners.size(); i++) {
                    CellEditorListener l = listeners.get(i);
                    if (null != l) {
                        l.editingCanceled(new ChangeEvent(jTable));
                    }
                }
            }

            @Override
            public void addCellEditorListener(CellEditorListener l) {
                listeners.add(l);
            }

            @Override
            public void removeCellEditorListener(CellEditorListener l) {
                listeners.remove(l);
            }
        });
    }

    private Map<DbQueryEnum, DbQueryInfo> map = null;

    public Map<DbQueryEnum, DbQueryInfo> getQueriesMap() {
        if (javax.swing.SwingUtilities.isEventDispatchThread()) {
            map = getQueriesMapInternal();
        } else {
            try {
                javax.swing.SwingUtilities.invokeAndWait(() -> {
                    map = getQueriesMapInternal();
                });
            } catch (InterruptedException | InvocationTargetException ex) {
                Logger.getLogger(DbSetupJPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return map;
    }

    private Map<DbQueryEnum, DbQueryInfo> getQueriesMapInternal() {
        Map<DbQueryEnum, DbQueryInfo> map = new EnumMap<>(DbQueryEnum.class);
        DefaultTableModel model = (DefaultTableModel) jTableQueries.getModel();
        for (int i = 0; i < model.getRowCount(); i++) {
            Object keyObject = model.getValueAt(i, 0);
            if (null == keyObject) {
                System.err.println("Null keyObject in table on row " + i);
                return null;
            }
            if (!(keyObject instanceof DbQueryEnum)) {
                System.err.println("Bad keyObject in table on row " + i);
                return null;
            }
            Object queryObject = model.getValueAt(i, 1);
            if (null == queryObject) {
                System.err.println("Null queryObject in table on row " + i);
                return null;
            }
            map.put((DbQueryEnum) keyObject,
                    DbQueryInfo.parse(Objects.toString(queryObject)));
        }
        return map;
    }

    public String getQueriesDir() {
        if (jRadioButtonResourceDir.isSelected()) {
            return jComboBoxResourceDir.getSelectedItem().toString();
        }
        return jTextFieldQueriesDirectory.getText();
    }

    public DbSetup getDbSetup() {
        return new DbSetupBuilder()
                .connected(connected)
                .type((DbType) jComboBoxDbType.getSelectedItem())
                .host(jTextFieldDBHost.getText())
                .passwd(jPasswordFieldDBPassword.getPassword())
                .dbname(jTextFieldDBName.getText())
                .user(jTextFieldDBUser.getText())
                .port(Integer.parseInt(jTextFieldDBPort.getText()))
                .queriesMap(getQueriesMap())
                .internalQueriesResourceDir(jRadioButtonResourceDir.isSelected())
                .queriesDir(getQueriesDir())
                .debug(jCheckBoxDebug.isSelected())
                .build();
    }

    private ExecutorService notifyService = Executors.newSingleThreadExecutor(new ThreadFactory() {
        @Override
        public Thread newThread(Runnable r) {
            Thread thread = new Thread(r, "dbSetupNotifyThread");
            thread.setDaemon(true);
            return thread;
        }
    });

    private List<Future<?>> futures = null;

    public List<Future<?>> notifyAllDbSetupListeners() {
        if (null != futures) {
            for (Future f : futures) {
                f.cancel(false);
            }
        }
        futures = new ArrayList<>();
        if (notifyService != null) {
            final DbSetup thisDbSetup = DbSetupJPanel.this.getDbSetup();
            Future<?> future
                    = notifyService.submit(new Runnable() {
                        @Override
                        public void run() {
                            for (DbSetupListener listener : dbSetupListeners) {
                                if (null != listener) {
                                    listener.accept(thisDbSetup);
                                }
                            }
                        }
                    });
            futures.add(future);
        }
        return futures;
    }

    private void addComboItemUnique(String item) {
        for (int i = 0; i < jComboBoxPropertiesFiles.getItemCount(); i++) {
            if (Objects.equals(jComboBoxPropertiesFiles.getItemAt(i), item)) {
                return;
            }
        }
        jComboBoxPropertiesFiles.addItem(item);
    }

    private void loadRecent() throws IOException {
        if (null != recentSettingsFile && recentSettingsFile.exists()) {
            TreeSet<String> set = new TreeSet<>();
            try (BufferedReader br = new BufferedReader(new FileReader(recentSettingsFile))) {
                String line;
                while (null != (line = br.readLine())) {
                    set.add(line.trim());
                }
            }
            jComboBoxPropertiesFiles.removeAllItems();
            try (PrintWriter pw = new PrintWriter(new FileWriter(recentSettingsFile))) {
                for (String p : set) {
                    pw.println(p);
                    addComboItemUnique(p);
                }
            }
        }
    }
    private File recentSettingsFile = new File(System.getProperty("user.home"), ".dbsetup_recent.txt");
    private File propertiesFile = new File(System.getProperty("user.home"), ".dbsetup_properties.txt");

    @Override
    public void setPropertiesFile(File f) {
        try {
            propertiesFile = f;
            String newPath = propertiesFile.getCanonicalPath();
            addComboItemUnique(newPath);
            jComboBoxPropertiesFiles.setSelectedItem(newPath);
            saveRecent(recentSettingsFile, newPath);
        } catch (IOException iOException) {
            Logger.getLogger(DbSetupJPanel.class.getName()).log(Level.SEVERE, null, iOException);
        }
    }

    private void saveRecent(File f, String newPath) throws IOException {
        recentSettingsFile.getParentFile().mkdirs();
        try (PrintWriter fw = new PrintWriter(new FileWriter(f, true))) {
            fw.println(newPath);
        }
    }

    @Override
    public File getPropertiesFile() {
        return propertiesFile;
    }
    private volatile boolean savingProperties = false;

    @Override
    public void saveProperties() {
        DbSetup setup = this.getDbSetup();
        saveProperties(setup.getDbType(), setup.getHost(), setup.getPort());
    }

    public void saveProperties(DbType dbtype, String host, int port) {
        try {
            savingProperties = true;
            propertiesFile.getParentFile().mkdirs();
            Properties props = new Properties();
            if (propertiesFile.exists()) {
                try (FileReader fr = new FileReader(propertiesFile)) {
                    props.load(fr);
                } catch (IOException ex) {
                    Logger.getLogger(VisionToDBJPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            props.putAll(updateArgsMap(dbtype));
            DbSetup setup = this.getDbSetup();
            if (host == null) {
                host = setup.getHost();
            }
            if (port < 1) {
                port = setup.getPort();
            }
            props.put(dbtype + ".host", host);
            props.put(dbtype + "." + host + ".port", Integer.toString(port));
            String dbHostPort = String.format("%s.%s_%d", dbtype.toString(), host, port);
            props.put(dbHostPort + ".name", setup.getDbName());
            props.put(dbHostPort + ".user", setup.getDbUser());
            props.put(dbHostPort + ".passwd", new String(setup.getDbPassword()));
            props.put("useQueriesResource", jRadioButtonResourceDir.isSelected());
            props.put("resDir", jComboBoxResourceDir.getSelectedItem());
            props.put("queryDir", jTextFieldQueriesDirectory.getText());
            try (FileWriter fw = new FileWriter(propertiesFile)) {
                props.store(fw, "");
            } catch (IOException ex) {
                Logger.getLogger(VisionToDBJPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        } finally {
            savingProperties = false;
        }
    }

    private volatile boolean restoringProperties = false;

    public Map<String, String> updateArgsMap() {
        return updateArgsMap(this.getDbSetup().getDbType());
    }

    private final Map<String, String> argsMap = DbSetupBuilder.getDefaultArgsMap();

    public Map<String, String> updateArgsMap(DbType dbtype) {
        DbSetup curSetup = this.getDbSetup();
        argsMap.put("--dbhost", curSetup.getHost());
        argsMap.put("--dbport", Integer.toString(curSetup.getPort()));
        argsMap.put("--dbname", curSetup.getDbName());
        argsMap.put("--dbuser", curSetup.getDbUser());
        argsMap.put("--dbpasswd",
                new String(curSetup.getDbPassword()));
        argsMap.put("--dbtype", curSetup.getDbType().toString());
        return argsMap;
    }

    public final void restoreProperties(DbType dbtype, String host, int port) {
        try {
            restoringProperties = true;
            if (null != propertiesFile && propertiesFile.exists()) {
                Properties props = new Properties();
                try (FileReader fr = new FileReader(propertiesFile)) {
                    props.load(fr);
                } catch (IOException ex) {
                    Logger.getLogger(VisionToDBJPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
                for (String propName : props.stringPropertyNames()) {
                    argsMap.put(propName, props.getProperty(propName));
                }
                updateFromArgs(argsMap, dbtype, host, port, null);
            }
        } catch (Exception e) {
            addLogMessage(e);
        } finally {
            restoringProperties = false;
        }
    }

    public void addLogMessage(Exception e) {
        e.printStackTrace();
    }

    public void addLogMessage(String msg) {
        System.err.println(msg);
    }

    public DbType getDbType() {
        return (DbType) jComboBoxDbType.getSelectedItem();
    }

    private volatile boolean updatingFromArgs = false;

    private void updateFromArgs(Map<String, String> _argsMap, DbType dbtype, String host, int port, DbSetup curSetup) {
        try {
            updatingFromArgs = true;
//            setText(_argsMap, this.jTextFieldDBName, "--dbname");
//            setText(_argsMap, this.jTextFieldDBUser, "--dbuser");
//            setText(_argsMap, this.jPasswordFieldDBPassword, "--dbpasswd");
            DbSetupBuilder builder = new DbSetupBuilder()
                    .type(dbtype)
                    .host(host)
                    .port(port)
                    .dbname(_argsMap.get("--dbname"))
                    .user(_argsMap.get("--dbuser"))
                    .passwd(_argsMap.getOrDefault("--dbpasswd", "").toCharArray());

//            DbSetup origSetup = curSetup != null? curSetup : dbSetupJPanel1.getDbSetup();
            if (null == host) {
                String dbSpecificHost = _argsMap.get(dbtype + ".host");
                if (null != dbSpecificHost) {
                    builder = builder.host(dbSpecificHost);
                    host = dbSpecificHost;
                }
                if (host == null) {
                    if (null == curSetup) {
                        curSetup = this.getDbSetup();
                    }
                    host = curSetup.getHost();
                }
                String dbSpecificPort = _argsMap.get(this.getDbType() + "." + host + ".port");
                if (null != dbSpecificPort) {

                    port = Integer.parseInt(dbSpecificPort);
                    builder = builder.port(port);
                }
            }
            if (port < 1) {
                if (host == null) {
                    if (null == curSetup) {
                        curSetup = this.getDbSetup();
                    }
                    host = curSetup.getHost();
                }
                String dbSpecificPort = _argsMap.get(this.getDbType() + "." + host + ".port");
                if (null != dbSpecificPort) {
//                    this.jTextFieldDBPort.setText(dbSpecificPort);
                    port = Integer.parseInt(dbSpecificPort);
                    builder = builder.port(port);
                }
            }
            String dbHostPort = String.format("%s.%s_%d", dbtype.toString(), host, port);
            String dbSpecificName = _argsMap.get(dbHostPort + ".name");
            if (null != dbSpecificName) {
                builder = builder.dbname(dbSpecificName);
            }
            String dbSpecificUser = _argsMap.get(dbHostPort + ".user");
            if (null != dbSpecificUser) {
                builder = builder.user(dbSpecificUser);
            }
            String dbSpecificPasswd = _argsMap.get(dbHostPort + ".passwd");
            if (null != dbSpecificUser) {
                builder = builder.passwd(dbSpecificPasswd.toCharArray());
            }
            this.setDbSetup(builder.build());
        } finally {
            updatingFromArgs = false;
        }
//        props.put(this.getDbType() + ".host", this.jTextFieldDBHost.getText());
//        props.put(this.getDbType() + "."+this.jTextFieldDBHost.getText()+".port", this.jTextFieldDBPort.getText());
//        props.put(this.getDbType() + "."+this.jTextFieldDBHost.getText()+".name", this.jTextFieldDBName.getText());
//        props.put(this.getDbType() + "."+this.jTextFieldDBHost.getText()+".user", this.jTextFieldDBUser.getText());
//        props.put(this.getDbType() + "."+this.jTextFieldDBHost.getText()+".passwd", this.jPasswordFieldDBPassword.getPassword());
//        
    }

    final String RESOURCE_BASE = "aprs/framework/database";

    public void updateFromArgs(Map<String, String> _argsMap) {
        try {
            updatingFromArgs = true;
            String host = _argsMap.get("--dbhost");
            int port = Integer.parseInt(_argsMap.get("--dbport"));
            String argsMapDbTypeString = _argsMap.get("--dbtype");
            DbSetup curSetup = null;
            DbType dbtype = null;
            if (argsMapDbTypeString == null || argsMapDbTypeString.length() < 1) {
                curSetup = this.getDbSetup();
                dbtype = curSetup.getDbType();
            } else {
                dbtype = DbType.valueOf(argsMapDbTypeString);
            }
            DbSetupBuilder builder = new DbSetupBuilder()
                    .type(dbtype)
                    .host(host)
                    .port(port)
                    .dbname(_argsMap.get("--dbname"))
                    .user(_argsMap.get("--dbuser"))
                    .passwd(_argsMap.getOrDefault("--dbpasswd", "").toCharArray());
//            setText(_argsMap, this.jTextFieldDBHost, "--dbhost");
//            setText(_argsMap, this.jTextFieldDBPort, "--dbport");
//            setText(_argsMap, this.jTextFieldDBHost, "--dbhost");
//            setText(_argsMap, this.jTextFieldDBPort, "--dbport");
//            this.jComboBoxDbType.setSelectedItem(DbType.valueOf(_argsMap.get("--dbtype")));
            String dbSpecificHost = _argsMap.get(dbtype + ".host");
            if (null != dbSpecificHost) {
//                this.jTextFieldDBHost.setText(dbSpecificHost);
                builder = builder.host(dbSpecificHost);
                host = dbSpecificHost;
            }
            String dbSpecificPort = _argsMap.get(dbtype + "." + host + ".port");
            if (null != dbSpecificPort) {
//                this.jTextFieldDBPort.setText(dbSpecificPort);
                port = Integer.parseInt(dbSpecificPort);
                builder = builder.port(port);
            }
            String useQueriesResourceString = _argsMap.get("useQueriesResource");
            boolean useQueriesResource = true;
            if (null != useQueriesResourceString) {
                useQueriesResource = Boolean.valueOf(useQueriesResourceString);
            }
            String resDirSuffix = _argsMap.get("resDir");
            if (null != resDirSuffix) {
                jComboBoxResourceDir.setSelectedItem(resDirSuffix);
            }
            if (useQueriesResource) {
                jRadioButtonExternDir.setSelected(false);
                jRadioButtonResourceDir.setSelected(true);
                try {
                    if (resDirSuffix == null) {
                        resDirSuffix = "neo4j/v1/";
                    }
                    if (!resDirSuffix.startsWith("/")) {
                        resDirSuffix = "/" + resDirSuffix;
                    }
                    if (!resDirSuffix.endsWith("/")) {
                        resDirSuffix = resDirSuffix + "/";
                    }
                    String resDir = RESOURCE_BASE + resDirSuffix;
                    Map<DbQueryEnum, DbQueryInfo> queriesMap
                            = DbSetupBuilder.readResourceQueriesDirectory(resDir);
                    loadQueriesMap(queriesMap, null);
                    builder = builder.queriesMap(queriesMap);
                } catch (IOException ex) {
                    Logger.getLogger(DbSetupJPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                jRadioButtonExternDir.setSelected(true);
                jRadioButtonResourceDir.setSelected(false);
                String queryDir = _argsMap.get("queryDir");
                if (null != queryDir) {
                    try {
                        jTextFieldQueriesDirectory.setText(queryDir);
                        Map<DbQueryEnum, DbQueryInfo> queriesMap
                                = DbSetupBuilder.readQueriesDirectory(queryDir);
                        loadQueriesMap(queriesMap, null);
                        builder = builder.queriesMap(queriesMap);
                    } catch (IOException ex) {
                        Logger.getLogger(DbSetupJPanel.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
            updateFromArgs(_argsMap, dbtype, host, port, curSetup);

        } finally {
            updatingFromArgs = false;
        }
//        props.put(this.getDbType() + ".host", this.jTextFieldDBHost.getText());
//        props.put(this.getDbType() + "."+this.jTextFieldDBHost.getText()+".port", this.jTextFieldDBPort.getText());
//        props.put(this.getDbType() + "."+this.jTextFieldDBHost.getText()+".name", this.jTextFieldDBName.getText());
//        props.put(this.getDbType() + "."+this.jTextFieldDBHost.getText()+".user", this.jTextFieldDBUser.getText());
//        props.put(this.getDbType() + "."+this.jTextFieldDBHost.getText()+".passwd", this.jPasswordFieldDBPassword.getPassword());
//        
    }

    public void autoResizeTableRowHeights(JTable table) {
        table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

        for (int rowIndex = 0; rowIndex < table.getRowCount(); rowIndex++) {
            int height = 0;
            for (int colIndex = 0; colIndex < table.getColumnCount(); colIndex++) {
                DefaultTableColumnModel colModel = (DefaultTableColumnModel) table.getColumnModel();
                TableColumn col = colModel.getColumn(colIndex);
                TableCellRenderer renderer = table.getCellRenderer(rowIndex, colIndex);
                Object value = table.getValueAt(rowIndex, colIndex);
                Component comp = renderer.getTableCellRendererComponent(table, value,
                        false, false, rowIndex, colIndex);
                Dimension compSize = comp.getPreferredSize();
                int thisCompHeight = compSize.height;
                height = Math.max(height, thisCompHeight);
            }
            if (height > 0) {
                table.setRowHeight(rowIndex, height);
            }
        }
    }

    @Override
    public final void loadProperties() {
        try {
            restoringProperties = true;
            if (null != propertiesFile && propertiesFile.exists()) {
                Properties props = new Properties();
                try (FileReader fr = new FileReader(propertiesFile)) {
                    props.load(fr);
                } catch (IOException ex) {
                    Logger.getLogger(VisionToDBJPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
                for (String propName : props.stringPropertyNames()) {
                    argsMap.put(propName, props.getProperty(propName));
                }
                updateFromArgs(argsMap);
            }
        } catch (Exception e) {
            addLogMessage(e);
        } finally {
            restoringProperties = false;
        }
    }

    @Override
    public void close() throws Exception {
    }

    Set<DbSetupListener> dbSetupListeners = new HashSet<>();

    public void addDbSetupListener(DbSetupListener listener) {
        dbSetupListeners.add(listener);
    }

    public void removeDbSetupListener(DbSetupListener listener) {
        dbSetupListeners.remove(listener);
    }

    private final DefaultComboBoxModel<DbType> dbTypeComboModel = new DefaultComboBoxModel<>(DbType.values());

    public DefaultComboBoxModel<DbType> getDbTypeComboModel() {
        return dbTypeComboModel;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroupQueryDirType;
    private javax.swing.JButton jButtonBrowse;
    private javax.swing.JButton jButtonBrowseExternalDirectory;
    private javax.swing.JButton jButtonConnectDB;
    private javax.swing.JButton jButtonDisconnectDB;
    private javax.swing.JButton jButtonLoad;
    private javax.swing.JButton jButtonLoadExternalDirectory;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JCheckBox jCheckBoxDebug;
    private javax.swing.JComboBox<aprs.framework.database.DbType> jComboBoxDbType;
    private javax.swing.JComboBox<String> jComboBoxPropertiesFiles;
    private javax.swing.JComboBox<String> jComboBoxResourceDir;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPasswordField jPasswordFieldDBPassword;
    private javax.swing.JRadioButton jRadioButtonExternDir;
    private javax.swing.JRadioButton jRadioButtonResourceDir;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTableQueries;
    private javax.swing.JTextArea jTextAreaConnectErrors;
    private javax.swing.JTextField jTextFieldDBHost;
    private javax.swing.JTextField jTextFieldDBName;
    private javax.swing.JTextField jTextFieldDBPort;
    private javax.swing.JTextField jTextFieldDBUser;
    private javax.swing.JTextField jTextFieldQueriesDirectory;
    // End of variables declaration//GEN-END:variables
}
