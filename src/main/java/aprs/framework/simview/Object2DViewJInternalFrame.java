/*
 * This software is public domain software, however it is preferred
 * that the following disclaimers be attached.
 * Software Copywrite/Warranty Disclaimer
 * 
 * This software was developed at the National Institute of Standards and
 * Technology by employees of the Federal Government in the course of their
 * official duties. Pursuant to title 17 Section 105 of the United States
 * Code this software is not subject to copyright protection and is in the
 * public domain.
 * 
 * This software is experimental. NIST assumes no responsibility whatsoever 
 * for its use by other parties, and makes no guarantees, expressed or 
 * implied, about its quality, reliability, or any other characteristic. 
 * We would appreciate acknowledgement if the software is used. 
 * This software can be redistributed and/or modified freely provided 
 * that any derivative works bear some notice that they are derived from it, 
 * and any modified versions bear some notice that they have been modified.
 * 
 *  See http://www.copyright.gov/title17/92chap1.html#105
 * 
 */
package aprs.framework.simview;

import aprs.framework.AprsJFrame;
import aprs.framework.SlotOffsetProvider;
import aprs.framework.database.PhysicalItem;
import crcl.base.PointType;
import crcl.base.PoseType;
import java.io.File;
import java.io.IOException;
import java.util.Collection;
import java.util.List;
import rcs.posemath.PmCartesian;

/**
 *
 * @author Will Shackleford {@literal <william.shackleford@nist.gov>}
 */
public class Object2DViewJInternalFrame extends javax.swing.JInternalFrame implements Object2DJFrameInterface {

    /**
     * Creates new form Object2DViewJInternalFrame
     */
    public Object2DViewJInternalFrame() {
        initComponents();
    }

    public void refresh(boolean loadFile) {
        object2DOuterJPanel1.refresh(loadFile);
    }
    
    
    public double getClosestRobotPartDistance() {
        return  this.object2DOuterJPanel1.getClosestRobotPartDistance();
    }
    
    public void setReverseFlag(boolean reverseFlag) {
        this.object2DOuterJPanel1.setReverseFlag(reverseFlag);
    }
    
    public void reloadDataFile() throws IOException  {
        this.object2DOuterJPanel1.reloadDataFile();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        object2DOuterJPanel1 = new aprs.framework.simview.Object2DOuterJPanel();

        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Object2D View/Simulate");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(object2DOuterJPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(object2DOuterJPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private aprs.framework.simview.Object2DOuterJPanel object2DOuterJPanel1;
    // End of variables declaration//GEN-END:variables

    @Override
    public List<PhysicalItem> getItems() {
        return object2DOuterJPanel1.getItems();
    }

    public void setViewLimits(double minX, double minY, double maxX, double maxY) {
        object2DOuterJPanel1.setViewLimits(minX, minY, maxX, maxY);
    }
    
    @Override
    public void setItems(List<PhysicalItem> items) {
        object2DOuterJPanel1.setItems(items);
    }

    @Override
    public void setPropertiesFile(File f) {
        object2DOuterJPanel1.setPropertiesFile(f);
    }

    @Override
    public File getPropertiesFile() {
       return object2DOuterJPanel1.getPropertiesFile();
    }

    @Override
    public void saveProperties() throws IOException {
       object2DOuterJPanel1.saveProperties();
    }

    @Override
    public void loadProperties() throws IOException {
        object2DOuterJPanel1.loadProperties();
    }
    
    public void setAprsJFrame(AprsJFrame aprsJFrame) {
        object2DOuterJPanel1.setAprsJFrame(aprsJFrame);
    }
    
    public void setSlotOffsetProvider(SlotOffsetProvider slotOffsetProvider) {
        object2DOuterJPanel1.setSlotOffsetProvider(slotOffsetProvider);
    }

    public AprsJFrame getAprsJFrame() {
        return object2DOuterJPanel1.getAprsJFrame();
    }

    @Override
    public void takeSnapshot(File f, PoseType pose, String label)  {
        object2DOuterJPanel1.takeSnapshot(f, pose, label);
    }
    
    @Override
    public void takeSnapshot(File f, PointType point, String label)  {
        object2DOuterJPanel1.takeSnapshot(f, point, label);
    }
    
    @Override
    public void takeSnapshot(File f, PmCartesian point, String label)  {
        object2DOuterJPanel1.takeSnapshot(f, point, label);
    }
    
    @Override
    public void takeSnapshot(File f,Collection<? extends PhysicalItem>  itemsToPaint)  {
        this.object2DOuterJPanel1.takeSnapshot(f, itemsToPaint);
    }
    
    @Override
    public void takeSnapshot(File f, PoseType pose, String label, int w, int h)  {
        object2DOuterJPanel1.takeSnapshot(f, pose, label,w,h);
    }
    
    @Override
    public void takeSnapshot(File f, PointType point, String label, int w, int h)  {
        object2DOuterJPanel1.takeSnapshot(f, point, label,w,h);
    }
    
    @Override
    public void takeSnapshot(File f, PmCartesian point, String label, int w, int h)  {
        object2DOuterJPanel1.takeSnapshot(f, point, label,w,h);
    }
    
    @Override
    public void takeSnapshot(File f,Collection<? extends PhysicalItem>  itemsToPaint, int w, int h)  {
        this.object2DOuterJPanel1.takeSnapshot(f, itemsToPaint,w,h);
    }

    public boolean isSimulated() {
        return this.object2DOuterJPanel1.isSimulated();
    }
    
    
    public boolean isConnected() {
        return this.object2DOuterJPanel1.isConnected();
    }
    
    @Override
    public void dispose() {
        super.dispose();
        this.object2DOuterJPanel1.dispose();
    }
    
    
}
