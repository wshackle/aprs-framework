/*
 * This software is public domain software, however it is preferred
 * that the following disclaimers be attached.
 * Software Copywrite/Warranty Disclaimer
 * 
 * This software was developed at the National Institute of Standards and
 * Technology by employees of the Federal Government in the course of their
 * official duties. Pursuant to title 17 Section 105 of the United States
 * Code this software is not subject to copyright protection and is in the
 * public domain.
 * 
 * This software is experimental. NIST assumes no responsibility whatsoever 
 * for its use by other parties, and makes no guarantees, expressed or 
 * implied, about its quality, reliability, or any other characteristic. 
 * We would appreciate acknowledgement if the software is used. 
 * This software can be redistributed and/or modified freely provided 
 * that any derivative works bear some notice that they are derived from it, 
 * and any modified versions bear some notice that they have been modified.
 * 
 *  See http://www.copyright.gov/title17/92chap1.html#105
 * 
 */
package aprs.framework.runner;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableModel;

/**
 *
 * @author Will Shackleford {@literal <william.shackleford@nist.gov>}
 */
public class RunnerJPanel extends javax.swing.JPanel {

    /**
     * Creates new form RunnerJPanel
     */
    public RunnerJPanel() {
        initComponents();
        jSpinnerArgCount.setValue(1);
        DefaultTableModel newModel = new DefaultTableModel(new String[]{"1"}, 1) {
            @Override
            public Class<?> getColumnClass(int columnIndex) {
                return String.class;
            }

        };
        jTableArgs.setModel(newModel);
        jSpinnerMaxLines.setValue(100);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTextFieldCommand = new javax.swing.JTextField();
        jButtonBrowseCommand = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jSpinnerArgCount = new javax.swing.JSpinner();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableArgs = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButtonBrowseDirectory = new javax.swing.JButton();
        jButtonRun = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jCheckBoxPauseOutput = new javax.swing.JCheckBox();
        jSpinnerMaxLines = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();

        jLabel1.setText("Command:");

        jTextFieldCommand.setText("prog.exe");

        jButtonBrowseCommand.setText("Browse Command");

        jLabel2.setText("Arguments:");

        jSpinnerArgCount.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerArgCountStateChanged(evt);
            }
        });

        jTableArgs.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "1", "2", "3", "4"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTableArgs);

        jLabel3.setText("Directory:");

        jTextField1.setText("/");

        jButtonBrowseDirectory.setText("Browse Directory");

        jButtonRun.setText("Run");
        jButtonRun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRunActionPerformed(evt);
            }
        });

        jButton2.setText("Stop");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        jCheckBoxPauseOutput.setText("Pause Output");

        jLabel4.setText("Max Lines");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 655, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1)
                    .addComponent(jTextFieldCommand)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonBrowseCommand))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jSpinnerArgCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonBrowseDirectory))
                    .addComponent(jTextField1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSpinnerMaxLines, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBoxPauseOutput)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonRun)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jButtonBrowseCommand))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldCommand, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jSpinnerArgCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jButtonBrowseDirectory))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonRun)
                    .addComponent(jButton2)
                    .addComponent(jCheckBoxPauseOutput)
                    .addComponent(jSpinnerMaxLines, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 268, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jSpinnerArgCountStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerArgCountStateChanged
        TableColumnModel colModel = jTableArgs.getColumnModel();
        final int argCount = (int) (jSpinnerArgCount.getValue());
        if (argCount < 1) {
            jSpinnerArgCount.setValue(1);
            return;
        }
        int colCount = colModel.getColumnCount();
        TableModel tableModel = jTableArgs.getModel();
        try {
            if (tableModel instanceof DefaultTableModel) {
                DefaultTableModel defaultTableModel = (DefaultTableModel) tableModel;
                Object data[][] = new Object[1][];
                String headers[] = new String[argCount];
                for (int i = 0; i < headers.length; i++) {
                    headers[i] = Integer.toString(i + 1);
                }
                data[0] = new Object[argCount];
                for (int i = 0; i < data[0].length; i++) {
                    data[0][i] = "";
                }
                for (int i = 0; i < colCount && i < argCount; i++) {
                    data[0][i] = defaultTableModel.getValueAt(0, i);
                    if (data[0][i] == null) {
                        data[0][i] = "";
                    }
                }
                defaultTableModel.setDataVector(data, headers);
                colCount = colModel.getColumnCount();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        while (colCount < argCount) {
            try {
                tableModel.setValueAt("", 0, colCount);

            } catch (Exception e) {
                e.printStackTrace();
            }
            TableColumn col = new TableColumn(colCount, 25, jTableArgs.getDefaultRenderer(String.class), jTableArgs.getDefaultEditor(String.class));
            col.setHeaderValue(Integer.toString(colCount + 1));
            colModel.addColumn(col);
            colCount++;
        }
        while (colCount > argCount) {
            colModel.removeColumn(colModel.getColumn(colCount - 1));
            colCount--;
        }

    }//GEN-LAST:event_jSpinnerArgCountStateChanged

    public int getMaxLines() {
        return (int) jSpinnerMaxLines.getValue();
    }
    
    private Process process = null;
    private Thread readerThread = null;

    public void runProgram() throws IOException {
        stopProgram();
        String command[] = new String[1 + ((int) jSpinnerArgCount.getValue())];
        command[0] = jTextFieldCommand.getText();
        for (int i = 0; i < command.length - 1; i++) {
            command[i + 1] = (String) jTableArgs.getValueAt(0, i);
            if (null == command[i + 1]) {
                command[i + 1] = "";
            }
        }
        process = new ProcessBuilder(command).start();
        readerThread = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    BufferedReader br = new BufferedReader(new InputStreamReader(process.getInputStream()));
                    String line;
                    List<String> lines = new ArrayList<>();
                    while ((line = br.readLine()) != null && !Thread.currentThread().isInterrupted()) {
                        int maxLines = getMaxLines();
                        if (lines.size() < maxLines) {
                            if (!jCheckBoxPauseOutput.isSelected()) {
                                jTextArea1.append(line);
                                jTextArea1.append(System.lineSeparator());
                            }
                            lines.add(line);
                        } else {
                            StringBuilder builder = new StringBuilder();
                            lines.remove(0);
                            lines.add(line);
                            int start = lines.size()-maxLines;
                            if(start < 0) {
                                start = 0;
                            }
                            for (int i = start; i < lines.size(); i++) {
                                builder.append(lines.get(i));
                                builder.append(System.lineSeparator());
                            }
                            if (!jCheckBoxPauseOutput.isSelected()) {
                                jTextArea1.setText(builder.toString());
                            }
                        }
//                        System.out.println("lines.size() = " + lines.size());
//                        System.out.println("jTextArea1.getText().length() = " + jTextArea1.getText().length());
                        if (!jCheckBoxPauseOutput.isSelected()) {
                            jTextArea1.setCaretPosition(jTextArea1.getText().length());
                        }
                    }
                } catch (IOException ex) {
                    Logger.getLogger(RunnerJPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }, jTextFieldCommand.getText() + "reader");
        readerThread.start();
    }

    public void stopProgram() {
        if (null != process) {
            InputStream in = process.getInputStream();
            process.destroyForcibly();
            try {
                in.close();
            } catch (IOException ex) {
                Logger.getLogger(RunnerJPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                process.waitFor(100, TimeUnit.MILLISECONDS);
            } catch (InterruptedException ex) {
                Logger.getLogger(RunnerJPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            process = null;
        }
        if (null != readerThread) {
            readerThread.interrupt();
            try {
                readerThread.join(100);
            } catch (InterruptedException ex) {
                Logger.getLogger(RunnerJPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            readerThread = null;
        }
    }

    private void jButtonRunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRunActionPerformed
        try {
            runProgram();
        } catch (Exception ex) {
            jTextArea1.append("Failed to start program:" + ex.toString());
            jTextArea1.append(System.lineSeparator());
            jTextArea1.setCaretPosition(jTextArea1.getText().length());
            Logger.getLogger(RunnerJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonRunActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        stopProgram();
    }//GEN-LAST:event_jButton2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButtonBrowseCommand;
    private javax.swing.JButton jButtonBrowseDirectory;
    private javax.swing.JButton jButtonRun;
    private javax.swing.JCheckBox jCheckBoxPauseOutput;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSpinner jSpinnerArgCount;
    private javax.swing.JSpinner jSpinnerMaxLines;
    private javax.swing.JTable jTableArgs;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextFieldCommand;
    // End of variables declaration//GEN-END:variables
}
