/*
 * This software is public domain software, however it is preferred
 * that the following disclaimers be attached.
 * Software Copywrite/Warranty Disclaimer
 * 
 * This software was developed at the National Institute of Standards and
 * Technology by employees of the Federal Government in the course of their
 * official duties. Pursuant to title 17 Section 105 of the United States
 * Code this software is not subject to copyright protection and is in the
 * public domain.
 * 
 * This software is experimental. NIST assumes no responsibility whatsoever 
 * for its use by other parties, and makes no guarantees, expressed or 
 * implied, about its quality, reliability, or any other characteristic. 
 * We would appreciate acknowledgement if the software is used. 
 * This software can be redistributed and/or modified freely provided 
 * that any derivative works bear some notice that they are derived from it, 
 * and any modified versions bear some notice that they have been modified.
 * 
 *  See http://www.copyright.gov/title17/92chap1.html#105
 * 
 */
package aprs.database.vision;

import aprs.database.DbSetupPublisher;
import aprs.database.DbType;
import aprs.database.PhysicalItem;
import aprs.database.PoseQueryElem;
import aprs.database.Slot;
import aprs.simview.Object2DJFrame;
import java.awt.Frame;
import java.awt.event.WindowEvent;
import java.io.File;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.List;
import java.util.Map;
import java.util.concurrent.Callable;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JTextField;
import org.checkerframework.checker.nullness.qual.Nullable;

/**
 *
 * @author Will Shackleford {@literal <william.shackleford@nist.gov>}
 */
public class VisionToDbMainJFrame extends javax.swing.JFrame implements VisionToDBJFrameInterface {

    private JTextField cellField = new JTextField();

    /**
     * Creates new form MainJFrame
     */
    @SuppressWarnings("initialization")
    public VisionToDbMainJFrame() {
        initComponents();
    }

    @Override
    public void connectVision() {
        visionToDBJPanel.connectVision();
    }
    
    private void setText(Map<String, String> argsMap, JTextField fld, String key) {
        if (argsMap.containsKey(key)) {
            fld.setText(argsMap.get(key));
        }
    }

    public void updateFromArgs(Map<String, String> _argsMap) {
        this.visionToDBJPanel.updateFromArgs(_argsMap);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings({"unchecked","deprecation"})
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        visionToDBJPanel = new aprs.database.vision.VisionToDBJPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuFile = new javax.swing.JMenu();
        jMenuItemFileExit = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItemSaveProperties = new javax.swing.JMenuItem();
        jMenuItemReloadProperties = new javax.swing.JMenuItem();
        jMenuItemSetPropertiesFile = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenuItemStartObject2D = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Vision To Database");
        setBackground(new java.awt.Color(210, 12, 12));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jMenuFile.setText("File");

        jMenuItemFileExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemFileExit.setText("Exit");
        jMenuItemFileExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFileExitActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemFileExit);
        jMenuFile.add(jSeparator1);

        jMenuItemSaveProperties.setText("Save Properties");
        jMenuItemSaveProperties.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSavePropertiesActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemSaveProperties);

        jMenuItemReloadProperties.setText("Reload Properties");
        jMenuItemReloadProperties.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemReloadPropertiesActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemReloadProperties);

        jMenuItemSetPropertiesFile.setText("Set Properites File");
        jMenuItemSetPropertiesFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSetPropertiesFileActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemSetPropertiesFile);
        jMenuFile.add(jSeparator2);

        jMenuItemStartObject2D.setText("Start Object 2D Viewer/Simulator");
        jMenuItemStartObject2D.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemStartObject2DActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemStartObject2D);

        jMenuBar1.add(jMenuFile);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(visionToDBJPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(visionToDBJPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItemFileExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFileExitActionPerformed
        this.setVisible(false);
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
    }//GEN-LAST:event_jMenuItemFileExitActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
//        System.out.println("formWindowClosing called.");
//        DbMain.closeAll();
    }//GEN-LAST:event_formWindowClosing

    private void jMenuItemSetPropertiesFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSetPropertiesFileActionPerformed
        JFileChooser chooser = new JFileChooser();
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            this.visionToDBJPanel.setPropertiesFile(chooser.getSelectedFile());
        }
    }//GEN-LAST:event_jMenuItemSetPropertiesFileActionPerformed

    private void jMenuItemSavePropertiesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSavePropertiesActionPerformed
        this.visionToDBJPanel.saveProperties();
    }//GEN-LAST:event_jMenuItemSavePropertiesActionPerformed

    private void jMenuItemReloadPropertiesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemReloadPropertiesActionPerformed
        this.visionToDBJPanel.loadProperties();
    }//GEN-LAST:event_jMenuItemReloadPropertiesActionPerformed

    @Nullable private Object2DJFrame object2DJFrame = null;
    
    private void jMenuItemStartObject2DActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemStartObject2DActionPerformed
        if (object2DJFrame == null) {
            object2DJFrame = new Object2DJFrame();
        }
        object2DJFrame.setVisible(true);
        object2DJFrame.setState(Frame.NORMAL);
    }//GEN-LAST:event_jMenuItemStartObject2DActionPerformed

    public void setAquiring(String s) {
        this.visionToDBJPanel.setAquiring(s);
    }

    public void updateInfo(List<PhysicalItem> _list, String line) {
        this.visionToDBJPanel.updateInfo(_list, line);
    }

    public void updataPoseQueryInfo(final List<PoseQueryElem> _list) {
        this.visionToDBJPanel.updataPoseQueryInfo(_list);
    }

    public boolean isDebug() {
        return this.visionToDBJPanel.isDebug();
    }

    public void addLogMessage(String stmnt) {
        this.visionToDBJPanel.addLogMessage(stmnt);
    }

    public void setVisionConnected(boolean _val) {
        this.visionToDBJPanel.setVisionConnected(_val);
    }

    public void setDBConnected(boolean _val) {
        this.visionToDBJPanel.setDBConnected(_val);
    }

    public void setLastCommand(String c) {
        this.visionToDBJPanel.setLastCommand(c);
    }

    public void setCommandConnected(boolean _val) {
        this.visionToDBJPanel.setCommandConnected(_val);
    }

    public void setPropertiesFile(File f) {
        this.visionToDBJPanel.setPropertiesFile(f);
    }

    public File getPropertiesFile() {
        return this.visionToDBJPanel.getPropertiesFile();
    }

    public void saveProperties() {
        this.visionToDBJPanel.saveProperties();
    }

    public void loadProperties() {
        this.visionToDBJPanel.loadProperties();
    }

    @Override
    public Map<String, String> updateArgsMap() {
        return visionToDBJPanel.updateArgsMap();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu jMenuFile;
    private javax.swing.JMenuItem jMenuItemFileExit;
    private javax.swing.JMenuItem jMenuItemReloadProperties;
    private javax.swing.JMenuItem jMenuItemSaveProperties;
    private javax.swing.JMenuItem jMenuItemSetPropertiesFile;
    private javax.swing.JMenuItem jMenuItemStartObject2D;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private aprs.database.vision.VisionToDBJPanel visionToDBJPanel;
    // End of variables declaration//GEN-END:variables

    @Override
    public void addLogMessage(Exception exception) {
        visionToDBJPanel.addLogMessage(exception);
    }

    @Override
    @Nullable public Connection getSqlConnection() {
        return visionToDBJPanel.getSqlConnection();
    }

    @Override
    public DbType getDbType() {
        return visionToDBJPanel.getDbType();
    }

    @Override
    public void setSqlConnection(Connection connection, DbType dbtype) throws SQLException {
        visionToDBJPanel.setSqlConnection(connection, dbtype);
    }

    @Override
    public Callable<DbSetupPublisher> getDbSetupSupplier() {
        throw new RuntimeException("getDbSetupSupplier not implemented");
    }

    @Override
    public void setDbSetupSupplier(Callable<DbSetupPublisher> dbSetupSupplier) {
    }

    @Override
    public void updateResultsMap(Map<String, UpdateResults> _map) {
        if(null != this.visionToDBJPanel) {
            this.visionToDBJPanel.updateResultsMap(_map);
        }
    }

    /**
     * Get a list of slots with names and relative position offsets for a given
     * kit or parts tray name.
     *
     * @param name name of the type of kit or slot tray
     * @param ignoreEmpty if false  
     *          no slots being found logs a verbose error message 
     *          and throws IllegalStateException (good for fail fast) or
     *  if true 
     *          simply returns an empty list (good or display or when multiple 
     *          will be checked.
     * 
     * @return list of slots with relative position offsets.
     */
    @Override
    public List<Slot> getSlotOffsets(String name,boolean ignoreEmpty) {
        return visionToDBJPanel.getSlotOffsets(name,ignoreEmpty);
    }

    @Override
    public Slot absSlotFromTrayAndOffset(PhysicalItem tray, Slot offsetItem) {
        return visionToDBJPanel.absSlotFromTrayAndOffset(tray, offsetItem);
    }
    
    @Override
    public Slot absSlotFromTrayAndOffset(PhysicalItem tray, Slot offsetItem,double rotationOffset) {
        return visionToDBJPanel.absSlotFromTrayAndOffset(tray, offsetItem,rotationOffset);
    }
}
